@page "/counter"
@rendermode InteractiveServer
@using VHouse.Interfaces
@inject IProductService ProductService

<link href="~/css/counter.css" rel="stylesheet" />

<PageTitle>Punto de Venta Vegano</PageTitle>

<!-- Modern 2025 Tickets Header -->
<div class="tickets-header">
    <h1>🎫 Punto de Venta Vegano</h1>
</div>

<section class="container-fluid">
    <div class="row">
        @if (errorMessage != null)
        {
            <div class="alert alert-danger mt-2 p-2">@errorMessage</div>
        }

        <!-- Order Processing Component -->
        <div class="col-lg-3 col-md-6 mb-3">
            <OrderProcessor Products="@Products" OnOrderProcessed="HandleOrderProcessed"></OrderProcessor>
            <ProductList Products="@Products" OnProductAdded="HandleProductAdded"></ProductList>
        </div>

        <div class="col-lg-9 col-md-12">
            <TicketSection Ticket="@ticket" @ref="ticketSection"></TicketSection>
        </div>
    </div>
</section>

@code {
    public List<Product> Products { get; set; } = new();
    public Dictionary<int, OrderItem> ticket = new();
    private string? errorMessage = null;
    private TicketSection? ticketSection { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los productos: {ex.Message}";
        }
    }

    private void HandleOrderProcessed(List<Product> selectedProducts)
    {
        foreach (var product in selectedProducts)
        {
            AddToTicket(product);
        }
    }

    private void HandleProductAdded(Product product)
    {
        AddToTicket(product);
    }

    private void AddToTicket(Product product)
    {
        if (ticket.ContainsKey(product.ProductId))
        {
            ticket[product.ProductId].Quantity++;
        }
        else
        {
            ticket[product.ProductId] = new OrderItem
                {
                    ProductId = product.ProductId,
                    ProductName = product.ProductName,
                    Product = product,
                    Quantity = 1
                };
        }
        ticketSection.UpdatePricesByPriceType();
    }
}
