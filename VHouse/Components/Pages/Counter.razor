@page "/counter"
@rendermode InteractiveServer
@using System.Text.Json
@using VHouse.Components.Pages.Controls
@inject HttpClient HttpClient
@inject ChatbotService ChatbotService
@inject ProductService ProductService

<PageTitle>Gestión de Pedidos Inteligentes</PageTitle>

<h1 class="text-primary">Gestión de Tickets</h1>

<section class="container-fluid">
    <div class="row">
        <!-- Order Input Section -->
        <div class="col-lg-4 col-md-6 mb-3">
            <h3 class="text-primary">Procesar Pedido</h3>
            <textarea class="form-control form-control-sm mb-2" @bind="userInput"
                      placeholder="Pega aquí la descripción del pedido" rows="3"></textarea>
            <button class="btn btn-success btn-sm w-100" @onclick="ProcessOrder">Procesar Pedido</button>
            @if (errorMessage != null)
            {
                <div class="alert alert-danger mt-2 p-2">@errorMessage</div>
            }
        </div>

        <!-- Product List Section -->
        <div class="col-lg-4 col-md-6 mb-3">
            <h3 class="text-primary">Lista de Precios</h3>
            @if (isLoading)
            {
                <p>Cargando productos...</p>
            }
            else if (products != null && products.Any())
            {
                <div class="table-responsive">
                    <table class="table table-sm table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Acción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in products)
                            {
                                <tr>
                                    <td>@product.ProductName</td>
                                    <td>
                                        <input type="number" step="0.01" value="@product.Price"
                                               class="form-control form-control-sm"
                                               @oninput="(e) => UpdatePrice(product, e.Value.ToString())" />
                                    </td>
                                    <td>
                                        <button class="btn btn-primary btn-sm"
                                                @onclick="() => AddToTicket(product)">
                                            Agregar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p>No hay productos disponibles.</p>
            }
        </div>
        <TicketSection ticket="ticket"></TicketSection>
    </div>
</section>


@code {
    private string userInput = string.Empty;
    private string? errorMessage = null;
    private bool isLoading = true;

    // List of products loaded from the service
    private List<Product> products = new();
    private List<Product> ticket = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch products from the service
            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los productos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessOrder()
    {
        errorMessage = null;
        try
        {
            if (string.IsNullOrWhiteSpace(userInput))
            {
                errorMessage = "El pedido está vacío. Por favor ingresa un pedido válido.";
                return;
            }
            userInput = string.Empty;

            // Convert products to JSON for processing
            string catalogJson = JsonSerializer.Serialize(products.Select(p => new { p.ProductId, p.ProductName }));
            var extractedProductIds = await ChatbotService.ExtractProductIdsAsync(catalogJson, userInput);

            if (extractedProductIds == null || !extractedProductIds.Any())
            {
                errorMessage = "No se encontraron productos en el pedido.";
                return;
            }

            // Add selected products to tickets
            var selectedProducts = products.Where(p => extractedProductIds.Contains(p.ProductId)).ToList();
            ticket.AddRange(selectedProducts);
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error al procesar el pedido: {ex.Message}";
        }
    }

    private void AddToTicket(Product product)
    {
        ticket.Add(product);
    }

    private void UpdatePrice(Product product, string newValue)
    {
        if (decimal.TryParse(newValue, out var newPrice))
        {
            product.Price = newPrice;
        }
    }
}