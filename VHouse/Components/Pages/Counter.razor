@page "/counter"
@using System.Text.Json
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject ChatbotService ChatbotService
@inject ProductService ProductService

<PageTitle>Gestión de Pedidos Inteligentes</PageTitle>

<h1 class="text-primary">Gestión de Tickets</h1>

<section class="mb-4">
    <h3>Procesar Pedido</h3>
    <textarea class="form-control mb-3" @bind="userInput" placeholder="Pega aquí la descripción del pedido" rows="4"></textarea>
    <button class="btn btn-success" @onclick="ProcessOrder">Procesar Pedido</button>
    @if (errorMessage != null)
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</section>

<section class="mb-4">
    <h3>Lista de Precios</h3>
    @if (isLoading)
    {
        <p>Cargando productos...</p>
    }
    else if (products != null && products.Any())
    {
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.ProductName</td>
                        <td>
                            <input type="number" step="0.01" value="@product.Price"
                            class="form-control"
                            @oninput="(e) => UpdatePrice(product, e.Value.ToString())" />
                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => AddToTicket(product)">Agregar al Ticket</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay productos disponibles.</p>
    }
</section>

<section>
    <h3>Tickets Generados</h3>
    @if (tickets.Any())
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Producto</th>
                    <th>Precio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ticket in tickets)
                {
                    <tr>
                        <td>@ticket.ProductName</td>
                        <td>@ticket.Price.ToString("C")</td>
                    </tr>
                }
            </tbody>
        </table>
        <h4 class="text-success">Total: @tickets.Sum(t => t.Price).ToString("C")</h4>
    }
    else
    {
        <p>No hay tickets generados.</p>
    }
</section>

@code {
    private string userInput = string.Empty;
    private string? errorMessage = null;
    private bool isLoading = true;

    // List of products loaded from the service
    private List<Product> products = new();
    private List<Product> tickets = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch products from the service
            products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los productos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ProcessOrder()
    {
        errorMessage = null;
        try
        {
            if (string.IsNullOrWhiteSpace(userInput))
            {
                errorMessage = "El pedido está vacío. Por favor ingresa un pedido válido.";
                return;
            }
            userInput = string.Empty;

            // Convert products to JSON for processing
            string catalogJson = JsonSerializer.Serialize(products.Select(p => new { p.ProductId, p.ProductName }));
            var extractedProductIds = await ChatbotService.ExtractProductIdsAsync(catalogJson, userInput);

            if (extractedProductIds == null || !extractedProductIds.Any())
            {
                errorMessage = "No se encontraron productos en el pedido.";
                return;
            }

            // Add selected products to tickets
            var selectedProducts = products.Where(p => extractedProductIds.Contains(p.ProductId)).ToList();
            tickets.AddRange(selectedProducts);
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocurrió un error al procesar el pedido: {ex.Message}";
        }
    }

    private void AddToTicket(Product product)
    {
        tickets.Add(product);
    }

    private void UpdatePrice(Product product, string newValue)
    {
        if (decimal.TryParse(newValue, out var newPrice))
        {
            product.Price = newPrice;
        }
    }
}