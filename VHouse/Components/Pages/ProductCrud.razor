@page "/product"
@rendermode InteractiveServer
@inject ProductService ProductService

<h2>Gestión de Productos</h2>

<div class="mb-4">
    <h3>Agregar Nuevo Producto</h3>
    <form>
        <div class="row">
            <div class="col-md-4">
                <label for="productName" class="form-label">Nombre del Producto</label>
                <input id="productName" type="text" class="form-control" @bind="newProductName" placeholder="Ej. Queso Cheddar" />
            </div>
            <div class="col-md-4">
                <label for="productPrice" class="form-label">Precio</label>
                <input id="productPrice" type="number" step="0.01" class="form-control" @bind="newProductPrice" placeholder="Ej. 150.00" />
            </div>
            <div class="col-md-4 align-self-end">
                <button type="button" class="btn btn-success" @onclick="AddProduct">Agregar Producto</button>
            </div>
        </div>
    </form>
</div>

<h3>Lista de Productos</h3>
@if (products.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Precio</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>
                        @if (product == productBeingEdited)
                        {
                            <input type="text" class="form-control" @bind="product.ProductName" />
                        }
                        else
                        {
                            @product.ProductName
                        }
                    </td>
                    <td>
                        @if (product == productBeingEdited)
                        {
                            <input type="number" step="0.01" class="form-control" @bind="product.Price" />
                        }
                        else
                        {
                            @product.Price.ToString("C")
                        }
                    </td>
                    <td>
                        @if (product == productBeingEdited)
                        {
                            <button class="btn btn-primary btn-sm" @onclick="() => SaveEdit(product)">Guardar</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancelar</button>
                        }
                        else
                        {
                            <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(product)">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteProduct(product)">Eliminar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No hay productos disponibles.</p>
}

@code {
    private List<Product> products = new();
    private string newProductName = string.Empty;
    private decimal newProductPrice;
    private Product? productBeingEdited = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task AddProduct()
    {
        if (string.IsNullOrWhiteSpace(newProductName) || newProductPrice <= 0)
        {
            return; // Opcionalmente, muestra un mensaje de error.
        }

        var newProduct = new Product
            {
                ProductName = newProductName,
                Price = newProductPrice
            };

        await ProductService.AddProductAsync(newProduct);
        await LoadProductsAsync();

        newProductName = string.Empty;
        newProductPrice = 0;
    }

    private void EditProduct(Product product)
    {
        productBeingEdited = product;
    }

    private async Task SaveEdit(Product product)
    {
        await ProductService.UpdateProductAsync(product);
        productBeingEdited = null;
        await LoadProductsAsync();
    }

    private void CancelEdit()
    {
        productBeingEdited = null;
    }

    private async Task DeleteProduct(Product product)
    {
        await ProductService.DeleteProductAsync(product.ProductId);
        await LoadProductsAsync();
    }
}
