@page "/product"
@rendermode InteractiveServer
@using VHouse.Interfaces
@inject IProductService ProductService

<link href="~/css/products.css" rel="stylesheet" />

<!-- Modern 2025 Product Management Header -->
<div class="product-header">
    <h2>🌱 Gestión de Productos Veganos</h2>
</div>

<div class="product-form">
    <h3>➕ Agregar Nuevo Producto</h3>
    <form>
        <div class="form-row">
            <div class="form-group">
                <label for="productName" class="form-label">Nombre del Producto</label>
                <input id="productName" type="text" class="form-control" @bind="newProductName" placeholder="Ej. Queso Vegano Cheddar" />
            </div>
            <div class="form-group">
                <label for="pricePublic" class="form-label">Precio Público</label>
                <input id="pricePublic" type="number" step="0.01" class="form-control" @bind="newPricePublic" placeholder="150.00" />
            </div>
            <div class="form-group">
                <label for="priceRetail" class="form-label">Precio Punto Venta</label>
                <input id="priceRetail" type="number" step="0.01" class="form-control" @bind="newPriceRetail" placeholder="140.00" />
            </div>
            <div class="form-group">
                <label for="priceCost" class="form-label">Precio de Costo</label>
                <input id="priceCost" type="number" step="0.01" class="form-control" @bind="newPriceCost" placeholder="100.00" />
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-success" @onclick="async () => await AddProduct()">Agregar Producto</button>
            </div>
        </div>
    </form>
</div>

<div class="products-section">
    <h3>📦 Lista de Productos</h3>
    @if (products.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre del Producto</th>
                    <th>Precio Público</th>
                    <th>Precio Punto Venta</th>
                    <th>Precio de Costo</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr>
                        <td><strong>#@product.ProductId</strong></td>
                        <td>
                            @if (product == productBeingEdited)
                            {
                                <input type="text" class="form-control" @bind="product.ProductName" />
                            }
                            else
                            {
                                <strong>@product.ProductName</strong>
                            }
                        </td>
                        <td>
                            @if (product == productBeingEdited)
                            {
                                <input type="number" step="0.01" class="form-control" @bind="product.PricePublic" />
                            }
                            else
                            {
                                <strong>@product.PricePublic.ToString("C")</strong>
                            }
                        </td>
                        <td>
                            @if (product == productBeingEdited)
                            {
                                <input type="number" step="0.01" class="form-control" @bind="product.PriceRetail" />
                            }
                            else
                            {
                                <strong>@product.PriceRetail.ToString("C")</strong>
                            }
                        </td>
                        <td>
                            @if (product == productBeingEdited)
                            {
                                <input type="number" step="0.01" class="form-control" @bind="product.PriceCost" />
                            }
                            else
                            {
                                <strong>@product.PriceCost.ToString("C")</strong>
                            }
                        </td>
                        <td>
                            @if (product == productBeingEdited)
                            {
                                <button class="btn btn-primary btn-sm" @onclick="async () => await SaveEdit(product)">💾 Guardar</button>
                                <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">❌ Cancelar</button>
                            }
                            else
                            {
                                <button class="btn btn-warning btn-sm" @onclick="() => EditProduct(product)">✏️ Editar</button>
                                <button class="btn btn-danger btn-sm" @onclick="async () => await DeleteProduct(product)">🗑️ Eliminar</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="empty-products">
            🌱 No hay productos disponibles en el inventario vegano
        </div>
    }
</div>

@code {
    private List<Product> products = new();
    private string newProductName = string.Empty;
    private decimal newPricePublic, newPriceRetail, newPriceCost;
    private Product? productBeingEdited = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        products = await ProductService.GetProductsAsync();
    }

    private async Task AddProduct()
    {
        if (string.IsNullOrWhiteSpace(newProductName) || newPricePublic <= 0 || newPriceRetail <= 0 || newPriceCost <= 0)
        {
            return; // Opcionalmente, muestra un mensaje de error.
        }

        var newProduct = new Product
            {
                ProductName = newProductName,
                PricePublic = newPricePublic,
                PriceRetail = newPriceRetail,
                PriceCost = newPriceCost
            };

        await ProductService.AddProductAsync(newProduct);
        await LoadProductsAsync();

        newProductName = string.Empty;
        newPricePublic = 0;
        newPriceRetail = 0;
        newPriceCost = 0;
    }

    private void EditProduct(Product product)
    {
        productBeingEdited = product;
    }

    private async Task SaveEdit(Product product)
    {
        await ProductService.UpdateProductAsync(product);
        productBeingEdited = null;
        await LoadProductsAsync();
    }

    private void CancelEdit()
    {
        productBeingEdited = null;
    }

    private async Task DeleteProduct(Product product)
    {
        await ProductService.DeleteProductAsync(product.ProductId);
        await LoadProductsAsync();
    }
}
