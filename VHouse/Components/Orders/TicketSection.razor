@using System.Text
@using VHouse.Services
@using VHouse.Classes
@inject IHttpContextAccessor HttpContextAccessor
@inject OrderService OrderService

<div class="col-lg-6 col-md-12">
    <h3 class="text-primary">📦 Ticket Generado</h3>

    <!-- Price Type Selection -->
    <div class="mb-3">
        <label for="priceType" class="form-label fw-bold">💲 Selecciona el tipo de precio:</label>
        <select id="priceType" class="form-select border-primary shadow-sm"
                @bind="selectedPriceType" @bind:event="onchange">
            <option value="public">Precio Público</option>
            <option value="retail">Precio Punto de Venta</option>
            <option value="cost">Precio de Costo</option>
        </select>
    </div>

    <!-- Store Selection if Retail Price -->
    @if (selectedPriceType == "retail")
    {
        @* <StoreSelector OnStoreSelected="HandleStoreSelected"></StoreSelector> *@
    }

    <!-- Delivery Date Selection -->
    <div class="mb-3">
        <label for="deliveryDate" class="form-label fw-bold text-primary">📅 Fecha de entrega:</label>
        <input id="deliveryDate" type="datetime-local" class="form-control border-primary shadow-sm"
               @bind-value="@deliveryDate" lang="es-MX" />
    </div>

    @if (ticket.Any())
    {
        <!-- Ticket Item List -->
        <div class="table-responsive">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>🛍 Producto</th>
                        <th>💲 Precio</th>
                        <th>❌ Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in ticket)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@GetPriceForType(product).ToString("C")</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromTicket(product)">❌</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Totals Section -->
        <div class="mt-3">
            <div class="alert alert-info">
                <strong>🟢 Subtotal:</strong> @ticket.Sum(t => GetPriceForType(t)).ToString("C")
            </div>

            <div class="mb-2">
                <label for="discount" class="form-label">🎟 Descuento:</label>
                <input id="discount" type="number" step="0.01" class="form-control" @bind="discount" placeholder="Ej. 20.00" />
            </div>

            <div class="mb-2">
                <label for="shippingCost" class="form-label">🚛 Costo de Envío:</label>
                <input id="shippingCost" type="number" step="0.01" class="form-control" @bind="shippingCost" placeholder="Ej. 50.00" />
            </div>

            <h4 class="text-success">✅ Total: @TotalPrice.ToString("C")</h4>
        </div>

        <!-- Action Buttons -->
        <div class="mt-3 d-flex flex-wrap gap-2">
            <button class="btn btn-secondary" @onclick="ClearTicket">🗑 Limpiar Pedido</button>
            <button class="btn btn-success" @onclick="CopyToClipboard">📋 Copiar Ticket</button>
            <button class="btn btn-primary" @onclick="SaveOrder">💾 Guardar Pedido</button>
        </div>

        <!-- Order Summary -->
        @if (isOrderGenerated)
        {
            <div class="mt-3">
                <h5>📜 Resumen del Pedido</h5>
                <textarea class="form-control mb-2" rows="4" readonly>@GenerateOrderText()</textarea>
            </div>
        }
    }
    else
    {
        <p class="text-muted">⚠️ No hay ticket generado.</p>
    }
</div>

@code {
    private DateTime? deliveryDate = DateTime.Now;
    private string selectedPriceType = "public";
    private string? selectedStore = null;
    private bool isOrderGenerated = false;
    private decimal discount = 0;
    private decimal shippingCost = 50;

    [Parameter] public List<Product> ticket { get; set; } = new();

    private decimal TotalPrice => ticket.Sum(t => GetPriceForType(t)) - discount + shippingCost;

    private async Task SaveOrder()
    {
        if (!deliveryDate.HasValue)
        {
            return;
        }

        var order = new Order
        {
            DeliveryDate = deliveryDate.Value,
            PriceType = selectedPriceType,
            TotalAmount = TotalPrice,
            SelectedStore = selectedPriceType == "retail" ? selectedStore : null,
            Items = ticket.Select(p => new OrderItem { ProductName = p.ProductName, Price = GetPriceForType(p) }).ToList()
        };

        await OrderService.SaveOrderAsync(order);
        isOrderGenerated = true;
    }

    private void HandleStoreSelected(string store) => selectedStore = store;

    private decimal GetPriceForType(Product product) =>
        selectedPriceType switch
        {
            "retail" => product.PriceRetail,
            "cost" => product.PriceCost,
            _ => product.PricePublic
        };

    private string GenerateOrderText()
    {
        var sb = new StringBuilder("📦 *Pedido Generado:*\n");
        foreach (var product in ticket) sb.AppendLine($"- {product.ProductName}: {GetPriceForType(product):C}");
        sb.AppendLine($"📅 *Entrega:* {deliveryDate?.ToShortDateString()}");
        sb.AppendLine($"✅ *Total:* {TotalPrice:C}");
        return sb.ToString();
    }

    private void CopyToClipboard()
    {
        var message = GenerateOrderText();
        var jsRuntime = (IJSRuntime)HttpContextAccessor.HttpContext?.RequestServices.GetService(typeof(IJSRuntime));
        jsRuntime?.InvokeVoidAsync("navigator.clipboard.writeText", message);
    }

    private void RemoveFromTicket(Product product)
    {
        ticket.Remove(product);
    }

    private void ClearTicket()
    {
        ticket.Clear();
        isOrderGenerated = false;
    }
}
