@using System.Text
@using System.Globalization
@using VHouse.Services
@using VHouse.Classes
@inject OrderService OrderService
@inject IJSRuntime JSRuntime

<div class="col-lg-6 col-md-12">
    <h3 class="text-primary">📦 Ticket Generado</h3>

    <!-- Price Type Selection -->
    <div class="mb-3">
        <label for="priceType" class="form-label fw-bold">💲 Selecciona el tipo de precio:</label>
        <select id="priceType" class="form-select border-primary shadow-sm"
                @bind="selectedPriceType" @bind:event="onchange">
            <option value="public">Precio Público</option>
            <option value="retail">Precio Punto de Venta</option>
            <option value="cost">Precio de Costo</option>
        </select>
    </div>

    <!-- Delivery Date Selection -->
    <div class="mb-3">
        <label for="deliveryDate" class="form-label fw-bold text-primary">📅 Fecha de entrega:</label>
        <input id="deliveryDate" type="datetime-local" class="form-control border-primary shadow-sm"
               @bind-value="@deliveryDate" lang="es-MX" />
    </div>

    @if (ticket.Any())
    {
        <!-- Ticket Item List -->
        <div class="table-responsive">
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>🛍 Producto</th>
                        <th>Cantidad</th>
                        <th>💲 Precio Unitario</th>
                        <th>💲 Subtotal</th>
                        <th>❌ Acción</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ticket.Values)
                    {
                        <tr>
                            <td>@item.Product.ProductName</td>
                            <td>
                                <input type="number" min="1" class="form-control" style="width: 60px;"
                                       @bind="item.Quantity" @bind:event="oninput" @onchange="UpdateTotal">
                            </td>
                            <td>@GetPriceForType(item.Product).ToString("C", new CultureInfo("es-MX"))</td>
                            <td>@(GetPriceForType(item.Product) * item.Quantity).ToString("C", new CultureInfo("es-MX"))</td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromTicket(item.Product)">❌</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Totals Section -->
        <div class="mt-3">
            <div class="alert alert-info">
                <strong>🟢 Subtotal:</strong> @Subtotal.ToString("C", new CultureInfo("es-MX"))
            </div>

            <div class="mb-2">
                <label for="discount" class="form-label">🎟 Descuento (%):</label>
                <input id="discount" type="number" step="0.1" class="form-control" @bind="discount" @bind:event="oninput" @onchange="UpdateTotal" placeholder="Ej. 10" />
                <div class="form-text">Descuento aplicado: @DiscountAmount.ToString("C", new CultureInfo("es-MX"))</div>
            </div>

            <div class="mb-2">
                <label for="shippingCost" class="form-label">🚛 Costo de Envío:</label>
                <input id="shippingCost" type="number" step="0.01" class="form-control" @bind="shippingCost" @bind:event="oninput" @onchange="UpdateTotal" placeholder="Ej. 50.00" />
                <div class="form-text">Costo en MXN: @shippingCost.ToString("C", new CultureInfo("es-MX"))</div>
            </div>

            <h4 class="text-success">✅ Total: @TotalPrice.ToString("C", new CultureInfo("es-MX"))</h4>
        </div>

        <!-- Action Buttons (Only Appear After Saving Order) -->
        @if (isOrderGenerated)
        {
            <div class="mt-3 d-flex flex-wrap gap-2">
                <button class="btn btn-success" @onclick="CopyToClipboard">📋 Copiar Ticket</button>
                <button class="btn btn-danger" @onclick="DeleteOrder">🗑 Eliminar Pedido</button>
            </div>

            <!-- Order Summary -->
            <div class="mt-3">
                <h5>📜 Resumen del Pedido</h5>
                <textarea class="form-control mb-2" rows="4" readonly>@GenerateOrderText()</textarea>
            </div>
        }
        else
        {
            <button class="btn btn-primary w-100" @onclick="ConfirmSaveOrder">💾 Guardar Pedido</button>
        }
    }
    else
    {
        <p class="text-muted">⚠️ No hay ticket generado.</p>
    }
</div>

@code {
    private DateTime? deliveryDate = DateTime.Now;
    private string selectedPriceType = "public";
    private bool isOrderGenerated = false;
    private decimal discount = 0; // Now percentage
    private decimal shippingCost = 50;

    [Parameter]
    public Dictionary<int, OrderItem> ticket = new();

    private decimal Subtotal => ticket.Values.Sum(item => GetPriceForType(item.Product) * item.Quantity);
    private decimal DiscountAmount => (discount / 100) * Subtotal;
    private decimal TotalPrice => Subtotal - DiscountAmount + shippingCost;

    private void UpdateTotal(ChangeEventArgs args)
    {
        StateHasChanged(); // Refresh UI after updating quantity
    }

    private async Task ConfirmSaveOrder()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de guardar el pedido? No podrás editarlo después.");
        if (confirm)
        {
            await SaveOrder();
        }
    }

    private async Task SaveOrder()
    {
        if (!deliveryDate.HasValue) return;

        var order = new Order
            {
                DeliveryDate = deliveryDate.Value.ToUniversalTime(),
                PriceType = selectedPriceType,
                TotalAmount = TotalPrice,
                Items = ticket.Values.ToList()
            };

        await OrderService.SaveOrderAsync(order);
        isOrderGenerated = true;
    }

    private async Task CopyToClipboard()
    {
        var message = GenerateOrderText();
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
    }

    private void DeleteOrder()
    {
        ticket.Clear();
        isOrderGenerated = false;
    }

    private decimal GetPriceForType(Product product) =>
        selectedPriceType switch
        {
            "retail" => product.PriceRetail,
            "cost" => product.PriceCost,
            _ => product.PricePublic
        };

    private void AddToTicket(Product product)
    {
        if (ticket.ContainsKey(product.ProductId))
        {
            ticket[product.ProductId].Quantity++;
        }
        else
        {
            ticket[product.ProductId] = new OrderItem
                {
                    Product = product,
                    Quantity = 1,
                    Price = GetPriceForType(product)
                };
        }
    }

    private void RemoveFromTicket(Product product)
    {
        if (ticket.ContainsKey(product.ProductId))
        {
            ticket.Remove(product.ProductId);
        }
    }

    private string GenerateOrderText()
    {
        var sb = new StringBuilder();
        sb.AppendLine("📦 *Pedido Generado:*");

        // List of ordered products
        foreach (var item in ticket.Values)
        {
            sb.AppendLine($"- {item.Product.ProductName} (x{item.Quantity}): {item.Price.ToString("C", new CultureInfo("es-MX"))}");
        }

        // Order details
        sb.AppendLine();
        sb.AppendLine($"🟢 *Subtotal:* {Subtotal.ToString("C", new CultureInfo("es-MX"))}");
        sb.AppendLine($"🎟 *Descuento ({discount}%):* -{DiscountAmount.ToString("C", new CultureInfo("es-MX"))}");
        sb.AppendLine($"🚛 *Costo de Envío:* {shippingCost.ToString("C", new CultureInfo("es-MX"))}");
        sb.AppendLine($"📅 *Entrega:* {deliveryDate?.ToString("dd/MM/yyyy HH:mm", new CultureInfo("es-MX"))}");
        sb.AppendLine($"✅ *Total a Pagar:* {TotalPrice.ToString("C", new CultureInfo("es-MX"))}");

        return sb.ToString();
    }

}
