@using System.Text
@using VHouse.Services
@using VHouse.Classes
@inject IHttpContextAccessor HttpContextAccessor
@inject OrderService OrderService

<div class="col-lg-4 col-md-12">
    <h3 class="text-primary">Ticket Generado</h3>

    <!-- Price Type Selection -->
    <div class="mb-3">
        <label for="priceType" class="form-label fw-bold">Selecciona el tipo de precio:</label>
        <select id="priceType" class="form-select border-primary shadow-sm"
                @bind="selectedPriceType" @bind:event="onchange">
            <option value="public">Precio Público</option>
            <option value="retail">Precio Punto de Venta</option>
            <option value="cost">Precio de Costo</option>
        </select>
    </div>

    <!-- Store Selection if Retail Price -->
    @if (selectedPriceType == "retail")
    {
        @* <StoreSelector OnStoreSelected="HandleStoreSelected"></StoreSelector> *@
    }

    <!-- Delivery Date Selection -->
    <div class="mb-3">
        <label for="deliveryDate" class="form-label fw-bold text-primary">📅 Fecha de entrega:</label>
        <input id="deliveryDate" type="datetime-local" class="form-control border-primary shadow-sm"
               @bind-value="@deliveryDate" lang="es-MX" />
    </div>

    @if (ticket.Any())
    {
        <h5 class="text-success">Total: @TotalPrice.ToString("C")</h5>

        <div class="mt-3">
            <button class="btn btn-secondary me-2" @onclick="ClearTicket">Limpiar Pedido</button>
            <button class="btn btn-success me-2" @onclick="CopyToClipboard">Copiar Ticket para WhatsApp</button>
            <button class="btn btn-primary" @onclick="SaveOrder">Guardar Pedido</button>
        </div>

        @if (isOrderGenerated)
        {
            <div class="mt-3">
                <textarea class="form-control mb-2" rows="4" readonly>@GenerateOrderText()</textarea>
            </div>
        }
    }
    else
    {
        <p>No hay ticket generado.</p>
    }
</div>

@code {
    private DateTime? deliveryDate = DateTime.Now;
    private string selectedPriceType = "public";
    private string? selectedStore = null;
    private bool isOrderGenerated = false;

    [Parameter] public List<Product> ticket { get; set; } = new();

    private decimal TotalPrice => ticket.Sum(t => GetPriceForType(t));

    private async Task SaveOrder()
    {
        if (!deliveryDate.HasValue)
        {
            return;
        }

        var order = new Order
        {
            DeliveryDate = deliveryDate.Value,
            PriceType = selectedPriceType,
            TotalAmount = TotalPrice,
            SelectedStore = selectedPriceType == "retail" ? selectedStore : null,
            Items = ticket.Select(p => new OrderItem { ProductName = p.ProductName, Price = GetPriceForType(p) }).ToList()
        };

        await OrderService.SaveOrderAsync(order);
        isOrderGenerated = true;
    }

    private void HandleStoreSelected(string store) => selectedStore = store;

    private decimal GetPriceForType(Product product) =>
        selectedPriceType switch
        {
            "retail" => product.PriceRetail,
            "cost" => product.PriceCost,
            _ => product.PricePublic
        };

    private string GenerateOrderText()
    {
        var sb = new StringBuilder("📦 *Pedido Generado:*\n");
        foreach (var product in ticket) sb.AppendLine($"- {product.ProductName}: {GetPriceForType(product):C}");
        sb.AppendLine($"📅 *Entrega:* {deliveryDate?.ToShortDateString()}");
        sb.AppendLine($"✅ *Total:* {TotalPrice:C}");
        return sb.ToString();
    }

    private void ClearTicket() { ticket.Clear(); isOrderGenerated = false; }
}
