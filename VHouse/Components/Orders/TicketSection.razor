@using System.Text
@using System.Globalization
@using VHouse.Services
@using VHouse.Classes
@inject OrderService OrderService
@inject IJSRuntime JSRuntime
@inject CustomerService CustomerService

<div class="row">
    <div class="col-lg-6 col-md-12">
        <!-- Customer Selection -->
        <div class="mb-3">
            <label for="customerSelect" class="form-label fw-bold">👤 Selecciona un cliente (opcional para retail):</label>
            <select id="customerSelect" class="form-select border-primary shadow-sm" @bind="selectedCustomerId">
                <option value="">-- Sin cliente --</option>
                @foreach (var customer in customers)
                {
                    <option value="@customer.CustomerId">@customer.FullName</option>
                }
            </select>
        </div>
    </div>

    <div class="col-lg-6 col-md-12">
        <!-- Ticket Section Component -->
        <div class="mb-3">
            <label for="priceType" class="form-label fw-bold">💲 Selecciona el tipo de precio:</label>
            <select id="priceType" class="form-select border-primary shadow-sm"
                    @bind="selectedPriceType">
                <option value="public">Precio Público</option>
                <option value="retail">Precio Punto de Venta</option>
                <option value="cost">Precio de Costo</option>
            </select>
        </div>
    </div>
</div>

@if (ticket.Any())
{
    <!-- Ticket Item List -->
    <div class="table-responsive">
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>🛍 Producto</th>
                    <th>Cantidad</th>
                    <th>💲 Precio Unitario</th>
                    <th>💲 Subtotal</th>
                    <th>❌ Acción</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ticket.Values)
                {
                    <tr>
                        <td>@item.Product.ProductName</td>
                        <td>
                            <input type="number" min="1" class="form-control" style="width: 60px;" @bind="item.Quantity" @bind:event="oninput" @onchange="UpdateTotal">
                        </td>
                        <td>@GetPriceForType(item.Product).ToString("C", new CultureInfo("es-MX"))</td>
                        <td>@((GetPriceForType(item.Product) * item.Quantity).ToString("C", new CultureInfo("es-MX")))</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromTicket(item.Product)">❌</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Totals Section -->
    <div class="mt-3">

        <div class="row">
            <div class="col-lg-8 col-md-12">
                <div class="alert alert-info">
                    <strong>🟢 Subtotal:</strong> @Subtotal.ToString("C", new CultureInfo("es-MX"))
                </div>
            </div>
            <div class="col-lg-4 col-md-12">
                <!-- Delivery Date Selection -->
                <div class="mb-3">
                    <label for="deliveryDate" class="form-label fw-bold text-primary">📅 Fecha de Entrega:</label>
                    <input id="deliveryDate" type="datetime-local" class="form-control border-primary shadow-sm" @bind-value="@deliveryDate" lang="es-MX" />
                </div>
            </div>
            <div class="col-lg-6 col-md-12">
                <div class="mb-2">
                    <label for="discount" class="form-label">🎟 Descuento (%):</label>
                    <input id="discount" type="number" step="0.1" class="form-control" @bind="discount" @bind:event="oninput" @onchange="UpdateTotal" />
                    <div class="form-text">Descuento aplicado: @DiscountAmount.ToString("C", new CultureInfo("es-MX"))</div>
                </div>
            </div>

            <div class="col-lg-6 col-md-12">
                <div class="mb-2">
                    <label for="shippingCost" class="form-label">🚛 Costo de Envío:</label>
                    <input id="shippingCost" type="number" step="0.01" class="form-control" @bind="shippingCost" @bind:event="oninput" @onchange="UpdateTotal" />
                    <div class="form-text">Costo en MXN: @shippingCost.ToString("C", new CultureInfo("es-MX"))</div>
                </div>
            </div>
        </div>

        <h4 class="text-success">✅ Total: @TotalPrice.ToString("C", new CultureInfo("es-MX"))</h4>
    </div>

    @if (isOrderGenerated)
    {
        <div class="mt-3 d-flex flex-wrap gap-2">
            <button class="btn btn-success" @onclick="CopyToClipboard">📋 Copiar Ticket</button>
            <button class="btn btn-danger" @onclick="DeleteOrder">🗑 Eliminar Pedido</button>
        </div>
        <div class="mt-3">
            <h5>📜 Resumen del Pedido</h5>
            <textarea class="form-control mb-2" rows="4" readonly>@GenerateOrderText()</textarea>
        </div>
    }
    else
    {
        <button class="btn btn-primary w-100" @onclick="ConfirmSaveOrder">💾 Guardar Pedido</button>
    }
}
else
{
    <p class="text-muted">⚠️ No hay ticket generado.</p>
}

@code {
    private List<Customer> customers = new();
    private string? selectedCustomerId;
    private DateTime? deliveryDate = DateTime.Now;
    private string selectedPriceType = "public";
    private bool isOrderGenerated = false;
    private decimal discount = 0;
    private decimal shippingCost = 50;

    [Parameter]
    public Dictionary<int, OrderItem> ticket { get; set; } = new();

    private decimal Subtotal => ticket.Values.Sum(item => GetPriceForType(item.Product) * item.Quantity);
    private decimal DiscountAmount => (discount / 100) * Subtotal;
    private decimal TotalPrice => Subtotal - DiscountAmount + shippingCost;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
    }

    private async Task ConfirmSaveOrder()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Guardar el pedido?");
        if (confirm)
        {
            await SaveOrder();
        }
    }

    private async Task SaveOrder()
    {
        if (!deliveryDate.HasValue) return;

        var orderCopy = new Order
        {
            CustomerId = string.IsNullOrEmpty(selectedCustomerId) ? null : int.Parse(selectedCustomerId),
            DeliveryDate = deliveryDate.Value.ToUniversalTime(),
            PriceType = selectedPriceType,
            TotalAmount = TotalPrice,
            Items = ticket.Values.Select(item => new OrderItem
            {
                ProductId = item.ProductId,
                ProductName = item.ProductName,
                Price = item.Price,
                Quantity = item.Quantity,
                Product = null
            }).ToList()
        };

        await OrderService.SaveOrderAsync(orderCopy);
        isOrderGenerated = true;

        if (!string.IsNullOrEmpty(selectedCustomerId))
        {
            await UpdateInventory(orderCopy);
        }
    }

    private async Task UpdateInventory(Order order)
    {
        await OrderService.ProcessOrderAsync(order);
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GenerateOrderText());
    }

    private void DeleteOrder()
    {
        ticket.Clear();
        isOrderGenerated = false;
    }

    private decimal GetPriceForType(Product product) =>
        selectedPriceType switch
        {
            "retail" => product.PriceRetail,
            "cost" => product.PriceCost,
            _ => product.PricePublic
        };

    private void RemoveFromTicket(Product product)
    {
        if (ticket.ContainsKey(product.ProductId))
        {
            ticket.Remove(product.ProductId);
        }
    }

    private string GenerateOrderText()
    {
        var sb = new StringBuilder();
        sb.AppendLine("📦 *Pedido Generado:*");

        // List of ordered products
        foreach (var item in ticket.Values)
        {
            sb.AppendLine($"- {item.Product.ProductName} (x{item.Quantity}): {item.Price.ToString("C", new CultureInfo("es-MX"))}");
        }

        // Order details
        sb.AppendLine();
        if(Subtotal<TotalPrice)
            sb.AppendLine($"🟢 *Subtotal:* {Subtotal.ToString("C", new CultureInfo("es-MX"))}");
        if (discount > 0)
            sb.AppendLine($"🎟 *Descuento ({discount}%):* -{DiscountAmount.ToString("C", new CultureInfo("es-MX"))}");
        if (discount > 0)
            sb.AppendLine($"🚛 *Costo de Envío:* {shippingCost.ToString("C", new CultureInfo("es-MX"))}");
        sb.AppendLine($"📅 *Entrega:* {deliveryDate?.ToString("dddd dd MMMM yyyy HH:mm", new CultureInfo("es-MX"))}");
        sb.AppendLine($"✅ *Total a Pagar:* {TotalPrice.ToString("C", new CultureInfo("es-MX"))}");

        return sb.ToString();
    }
    private void UpdateTotal(ChangeEventArgs args)
    {
        StateHasChanged(); // Refresh UI after updating quantity
    }
}
