@page "/analytics"
@using VHouse.Interfaces
@using VHouse.Classes
@inject IBusinessIntelligenceService BusinessIntelligence
@inject IAnalyticsService Analytics
@inject IJSRuntime JSRuntime

<div class="analytics-dashboard">
    <div class="dashboard-header">
        <h2>
            <i class="fas fa-chart-line"></i>
            Analytics Dashboard
        </h2>
        <div class="dashboard-controls">
            <select @bind="selectedDashboardType" @bind:after="RefreshDashboard" class="form-select">
                <option value="executive">Executive</option>
                <option value="operational">Operational</option>
                <option value="sales">Sales</option>
                <option value="financial">Financial</option>
            </select>
            <button class="btn btn-primary" @onclick="RefreshDashboard">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
        </div>
    </div>

    @if (dashboard != null)
    {
        <div class="dashboard-grid" style="@GetGridStyle()">
            @foreach (var widget in dashboard.Widgets)
            {
                <div class="dashboard-widget" style="@GetWidgetStyle(widget)">
                    <div class="widget-header">
                        <h4>@widget.Title</h4>
                        @if (widget.Data.LastUpdated != DateTime.MinValue)
                        {
                            <span class="last-updated">
                                Updated: @widget.Data.LastUpdated.ToString("HH:mm")
                            </span>
                        }
                    </div>
                    <div class="widget-content">
                        @if (widget.Type == "metric")
                        {
                            <MetricWidget Widget="widget" />
                        }
                        else if (widget.Type == "chart")
                        {
                            <ChartWidget Widget="widget" />
                        }
                        else if (widget.Type == "table")
                        {
                            <TableWidget Widget="widget" />
                        }
                        else if (widget.Type == "gauge")
                        {
                            <GaugeWidget Widget="widget" />
                        }
                    </div>
                </div>
            }
        </div>
    }
    else if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading dashboard...</p>
        </div>
    }

    <div class="dashboard-insights">
        <h3>Business Insights</h3>
        @if (businessInsights != null && businessInsights.KPIs.Any())
        {
            <div class="kpi-grid">
                @foreach (var kpi in businessInsights.KPIs)
                {
                    <div class="kpi-card">
                        <div class="kpi-name">@kpi.Name</div>
                        <div class="kpi-value">@kpi.Value.ToString("N2")</div>
                        <div class="kpi-status @GetKpiStatusClass(kpi)">
                            @kpi.Status
                        </div>
                    </div>
                }
            </div>
        }

        @if (businessInsights != null && businessInsights.Opportunities.Any())
        {
            <div class="insights-section">
                <h4>Opportunities</h4>
                @foreach (var opportunity in businessInsights.Opportunities)
                {
                    <div class="insight-card opportunity">
                        <h5>@opportunity.Name</h5>
                        <p>@opportunity.Description</p>
                        <span class="potential-value">Potential Impact: @opportunity.PotentialImpact.ToString("N2")</span>
                    </div>
                }
            </div>
        }

        @if (businessInsights != null && businessInsights.Risks.Any())
        {
            <div class="insights-section">
                <h4>Risks</h4>
                @foreach (var risk in businessInsights.Risks)
                {
                    <div class="insight-card risk">
                        <h5>@risk.Name</h5>
                        <p>@risk.Description</p>
                        <span class="impact-level">Impact Level: @risk.Impact.ToString("N1")</span>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private Dashboard dashboard;
    private BusinessInsights businessInsights;
    private string selectedDashboardType = "executive";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboard();
        await LoadBusinessInsights();
    }

    private async Task LoadDashboard()
    {
        isLoading = true;
        try
        {
            dashboard = selectedDashboardType switch
            {
                "executive" => await BusinessIntelligence.GenerateExecutiveDashboardAsync(),
                "operational" => await BusinessIntelligence.GenerateOperationalDashboardAsync(),
                "sales" => await BusinessIntelligence.GenerateSalesDashboardAsync(),
                "financial" => await BusinessIntelligence.GenerateFinancialDashboardAsync(),
                _ => await BusinessIntelligence.GenerateExecutiveDashboardAsync()
            };
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadBusinessInsights()
    {
        var endDate = DateTime.UtcNow;
        var startDate = endDate.AddDays(-30);
        businessInsights = await Analytics.GetBusinessInsightsAsync(startDate, endDate);
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboard();
        await LoadBusinessInsights();
        StateHasChanged();
    }

    private string GetGridStyle()
    {
        return "display: grid; grid-template-columns: repeat(12, 1fr); gap: 20px; padding: 20px;";
    }

    private string GetWidgetStyle(Widget widget)
    {
        var colStart = widget.Position.X + 1;
        var colEnd = colStart + widget.Size.Width;
        var rowStart = widget.Position.Y + 1;
        var rowEnd = rowStart + widget.Size.Height;

        return $"grid-column: {colStart} / {colEnd}; grid-row: {rowStart} / {rowEnd};";
    }

    private string GetKpiStatusClass(KeyPerformanceIndicator kpi)
    {
        return kpi.Status?.ToLower() switch
        {
            "on track" => "status-good",
            "below target" => "status-warning",
            "critical" => "status-critical",
            _ => "status-neutral"
        };
    }
}

<!-- Metric Widget Component -->
<div class="metric-widget-component">
    @if (Widget?.Data?.Value != null)
    {
        <div class="metric-display">
            <div class="metric-value">
                @if (Widget.Data.Metadata?.ContainsKey("currency") == true)
                {
                    <span>$@((double)Widget.Data.Value).ToString("N2")</span>
                }
                else
                {
                    <span>@Widget.Data.Value</span>
                }
            </div>
            @if (Widget.Data.Metadata?.ContainsKey("change") == true)
            {
                <div class="metric-change @GetChangeClass()">
                    @Widget.Data.Metadata["change"]
                </div>
            }
        </div>
    }
</div>

<!-- Chart Widget Component -->
<div class="chart-widget-component">
    @if (Widget?.Data?.Series?.Any() == true)
    {
        <div class="chart-container" id="chart-@Widget.WidgetId">
            <canvas></canvas>
        </div>
    }
</div>

<!-- Table Widget Component -->
<div class="table-widget-component">
    @if (Widget?.Data?.Value is List<KeyPerformanceIndicator> kpis)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>KPI</th>
                    <th>Value</th>
                    <th>Target</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var kpi in kpis)
                {
                    <tr>
                        <td>@kpi.Name</td>
                        <td>@kpi.Value.ToString("N2")</td>
                        <td>@kpi.Target.ToString("N2")</td>
                        <td><span class="badge @GetKpiBadgeClass(kpi)">@kpi.Status</span></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Gauge Widget Component -->
<div class="gauge-widget-component">
    @if (Widget?.Data?.Value != null)
    {
        <div class="gauge-container" id="gauge-@Widget.WidgetId">
            <div class="gauge-value">@Widget.Data.Value</div>
        </div>
    }
</div>

@code {
    [Parameter] public Widget Widget { get; set; }

    private string GetChangeClass()
    {
        var change = Widget?.Data?.Metadata?["change"]?.ToString() ?? "";
        if (change.StartsWith("+")) return "positive-change";
        if (change.StartsWith("-")) return "negative-change";
        return "neutral-change";
    }

    private string GetKpiBadgeClass(KeyPerformanceIndicator kpi)
    {
        return kpi.Status?.ToLower() switch
        {
            "on track" => "bg-success",
            "below target" => "bg-warning",
            "critical" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Widget?.Type == "chart")
        {
            await RenderChart();
        }
        else if (firstRender && Widget?.Type == "gauge")
        {
            await RenderGauge();
        }
    }

    private async Task RenderChart()
    {
        if (Widget?.Data?.Series?.Any() != true) return;

        var chartData = new
        {
            labels = Widget.Data.Series.First().Data.Select(d => d.Timestamp.ToString("MMM dd")).ToArray(),
            datasets = Widget.Data.Series.Select(s => new
            {
                label = s.Name,
                data = s.Data.Select(d => d.Value).ToArray(),
                borderColor = GetChartColor(s.Name),
                backgroundColor = GetChartColor(s.Name, 0.2)
            }).ToArray()
        };

        var options = new
        {
            responsive = true,
            plugins = new
            {
                legend = new { display = Widget.Configuration?.ShowLegend ?? true }
            }
        };

        await JSRuntime.InvokeVoidAsync("renderChart", $"chart-{Widget.WidgetId}", Widget.Configuration?.ChartOptions?["chartType"] ?? "line", chartData, options);
    }

    private async Task RenderGauge()
    {
        var value = Convert.ToDouble(Widget.Data.Value);
        await JSRuntime.InvokeVoidAsync("renderGauge", $"gauge-{Widget.WidgetId}", value, 100);
    }

    private string GetChartColor(string seriesName, double opacity = 1.0)
    {
        var colors = new[]
        {
            $"rgba(54, 162, 235, {opacity})",
            $"rgba(255, 99, 132, {opacity})",
            $"rgba(255, 206, 86, {opacity})",
            $"rgba(75, 192, 192, {opacity})",
            $"rgba(153, 102, 255, {opacity})"
        };
        
        var index = Math.Abs(seriesName.GetHashCode()) % colors.Length;
        return colors[index];
    }
}