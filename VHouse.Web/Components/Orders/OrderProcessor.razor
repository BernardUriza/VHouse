@page "/orders/processor"
@using System.Text.Json
@using MediatR
@using VHouse.Domain.Interfaces
@using VHouse.Domain.Entities
@using VHouse.Application.Commands
@using VHouse.Application.DTOs
@using VHouse.Domain.Enums
@using VHouse.Domain.ValueObjects
@using VHouse.Application.Handlers
@inject IAIService AIService
@inject IMediator Mediator
@inject ProcessBusinessConversationCommandHandler BusinessHandler

<div class="ai-order-processor">
    <div class="processor-header">
        <h3>🌱 Asistente B2B Inteligente</h3>
        <p class="subtitle">Chat IA, Emails y Procesamiento Avanzado</p>
    </div>

    <div class="tabs-container">
        <div class="tab-buttons">
            <button class="tab-btn @(activeTab == "chat" ? "active" : "")" @onclick="@(() => SetActiveTab("chat"))">
                💬 Chat
            </button>
            <button class="tab-btn @(activeTab == "email" ? "active" : "")" @onclick="@(() => SetActiveTab("email"))">
                📧 Emails
            </button>
            <button class="tab-btn @(activeTab == "order" ? "active" : "")" @onclick="@(() => SetActiveTab("order"))">
                📦 Pedidos
            </button>
            <button class="tab-btn @(activeTab == "analytics" ? "active" : "")" @onclick="@(() => SetActiveTab("analytics"))">
                📊 Analytics
            </button>
        </div>

        @if (activeTab == "chat")
        {
            <div class="input-section">
                <div class="form-group">
                    <select @bind="selectedCustomerId" class="form-control">
                        <option value="">Cliente...</option>
                        <option value="1">VegaMart</option>
                        <option value="2">EcoTienda</option>
                        <option value="3">RestauranteVerde</option>
                    </select>
                </div>

                <div class="form-group">
                    <select @bind="conversationType" class="form-control">
                        <option value="@BusinessConversationType.General">General</option>
                        <option value="@BusinessConversationType.OrderInquiry">Pedido</option>
                        <option value="@BusinessConversationType.PriceQuote">Cotización</option>
                        <option value="@BusinessConversationType.BulkOrder">Mayoreo</option>
                    </select>
                </div>

                <textarea class="ai-textarea" @bind="conversationMessage"
                          placeholder="Ej: Necesito 50 cajas de leche de avena para la próxima semana..." 
                          rows="4"></textarea>
                
                <button class="btn-primary-ai" @onclick="ProcessConversation" disabled="@isProcessing">
                    @(isProcessing ? "🤔 Analizando..." : "💬 Procesar Chat")
                </button>
            </div>

            @if (conversationResult != null)
            {
                <div class="result-card">
                    <div class="result-header">🤖 Respuesta IA</div>
                    <div class="result-content">@((MarkupString)conversationResult.Response.Replace("\n", "<br>"))</div>
                    <div class="result-meta">
                        <span class="badge priority-@conversationResult.Priority.ToString().ToLower()">@conversationResult.Priority</span>
                        <small>@conversationResult.UsedProvider | @conversationResult.ResponseTimeMs ms</small>
                    </div>
                    
                    @if (conversationResult.ProductRecommendations.Any())
                    {
                        <div class="recommendations">
                            <h4>🌿 Productos Sugeridos</h4>
                            @foreach (var product in conversationResult.ProductRecommendations)
                            {
                                <div class="product-rec">
                                    <span>@product.ProductName</span>
                                    <span class="price">$@product.Price</span>
                                    <span class="@(product.InStock ? "in-stock" : "out-stock")">
                                        @(product.InStock ? "✅" : "❌")
                                    </span>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }

        @if (activeTab == "email")
        {
            <div class="input-section">
                <div class="form-group">
                    <select @bind="emailCustomerId" class="form-control">
                        <option value="">Cliente...</option>
                        <option value="1">VegaMart</option>
                        <option value="2">EcoTienda</option>
                        <option value="3">RestauranteVerde</option>
                    </select>
                </div>

                <div class="form-group">
                    <select @bind="emailType" class="form-control">
                        <option value="confirmacion_pedido">Confirmación</option>
                        <option value="actualizacion_entrega">Entrega</option>
                        <option value="recordatorio_pago">Pago</option>
                        <option value="oferta_promocional">Promoción</option>
                    </select>
                </div>

                <textarea class="ai-textarea" @bind="emailData"
                          placeholder='{"pedidoId": 123, "productos": ["Leche", "Queso"]}'
                          rows="2"></textarea>
                
                <button class="btn-primary-ai" @onclick="GenerateEmail" disabled="@isProcessing">
                    @(isProcessing ? "🤖 Generando..." : "📧 Generar Email")
                </button>
            </div>

            @if (emailResult != null)
            {
                <div class="result-card">
                    <div class="result-header">📧 Email Generado</div>
                    <div class="email-preview">
                        <div><strong>Asunto:</strong> @emailResult.Subject</div>
                        <div><strong>Urgente:</strong> @(emailResult.IsUrgent ? "⚠️ SÍ" : "No")</div>
                        <div class="email-body">@((MarkupString)emailResult.Body)</div>
                    </div>
                </div>
            }
        }

        @if (activeTab == "order")
        {
            <div class="input-section">
                <div class="form-group">
                    <select @bind="orderCustomerId" class="form-control">
                        <option value="">Cliente...</option>
                        <option value="1">VegaMart</option>
                        <option value="2">EcoTienda</option>
                        <option value="3">RestauranteVerde</option>
                    </select>
                </div>

                <textarea class="ai-textarea" @bind="complexOrderText"
                          placeholder="Procesamiento inteligente: Necesito 25 leches de avena Silk para entregar el 15 de marzo, y 10 quesos veganos para mañana..."
                          rows="3"></textarea>
                
                <button class="btn-primary-ai" @onclick="ProcessEnhancedOrder" disabled="@isProcessing">
                    @(isProcessing ? "🤖 Procesando..." : "✨ Procesamiento Inteligente")
                </button>
                
                <button class="btn-secondary-ai" @onclick="ValidateAndSuggestAlternatives" disabled="@isProcessing">
                    @(isProcessing ? "🔍 Validando..." : "🔄 Validar y Sugerir Alternativas")
                </button>
            </div>

            @if (complexOrderResult != null)
            {
                <div class="result-card">
                    <div class="result-header">📦 Pedido Procesado</div>
                    <div class="order-summary">
                        <div class="order-items">
                            @foreach (var item in complexOrderResult.ExtractedItems)
                            {
                                <div class="order-item">
                                    <span>@item.ProductName</span>
                                    <span>@item.Quantity x $@item.UnitPrice</span>
                                </div>
                            }
                        </div>
                        <div class="order-total">
                            <strong>Total: $@complexOrderResult.OrderSummary.EstimatedTotal @complexOrderResult.OrderSummary.Currency</strong>
                        </div>
                        
                        @if (complexOrderResult.RequestedDeliveryDate.HasValue)
                        {
                            <div class="delivery">🚚 @complexOrderResult.RequestedDeliveryDate.Value.ToString("dd/MM/yyyy")</div>
                        }
                        
                        @if (complexOrderResult.PaymentTerms != null)
                        {
                            <div class="payment">💳 @complexOrderResult.PaymentTerms.TermsDescription</div>
                        }
                    </div>
                </div>
            }
        }

        @if (activeTab == "analytics")
        {
            <div class="input-section">
                <div class="form-group">
                    <select @bind="recommendationCustomerId" class="form-control">
                        <option value="">Cliente para Recomendaciones...</option>
                        <option value="1">VegaMart - Historial Lácteos</option>
                        <option value="2">EcoTienda - Cliente Premium</option>
                        <option value="3">RestauranteVerde - Bulk Orders</option>
                    </select>
                </div>
                
                <button class="btn-primary-ai" @onclick="GenerateRecommendations" disabled="@isProcessing">
                    @(isProcessing ? "🤖 Analizando Patrones..." : "🎯 Generar Recomendaciones")
                </button>
                
                <button class="btn-secondary-ai" @onclick="AnalyzeCustomerPattern" disabled="@isProcessing">
                    @(isProcessing ? "📊 Analizando..." : "📈 Analizar Patrones de Compra")
                </button>
            </div>

            @if (recommendations != null && recommendations.Any())
            {
                <div class="result-card">
                    <div class="result-header">🎯 Recomendaciones Inteligentes</div>
                    <div class="recommendations-content">
                        @foreach (var rec in recommendations)
                        {
                            <div class="recommendation-item">
                                <div class="rec-header">
                                    <span class="rec-name">@rec.ProductName</span>
                                    <span class="confidence-score">@($"{rec.ConfidenceScore:P0}")</span>
                                    @if (rec.IsVegan)
                                    {
                                        <span class="vegan-badge">🌱</span>
                                    }
                                </div>
                                <div class="rec-reason">💡 @rec.ReasonForRecommendation</div>
                            </div>
                        }
                    </div>
                </div>
            }

            @if (customerPattern != null)
            {
                <div class="result-card">
                    <div class="result-header">📊 Análisis de Patrones</div>
                    <div class="pattern-content">
                        <div class="pattern-item">
                            <span class="pattern-label">Ciclo de Pedidos:</span>
                            <span class="pattern-value">@customerPattern.OrderingCycle</span>
                        </div>
                        <div class="pattern-item">
                            <span class="pattern-label">Valor Promedio:</span>
                            <span class="pattern-value">$@customerPattern.AverageOrderValue MXN</span>
                        </div>
                        <div class="pattern-item">
                            <span class="pattern-label">Tendencia:</span>
                            <span class="pattern-value @(customerPattern.GrowthTrend > 0 ? "trend-positive" : "trend-negative")">
                                @($"{customerPattern.GrowthTrend:P1}")
                            </span>
                        </div>
                        @if (customerPattern.PredictedNextOrderDate.HasValue)
                        {
                            <div class="pattern-item">
                                <span class="pattern-label">Próximo Pedido Esperado:</span>
                                <span class="pattern-value">@customerPattern.PredictedNextOrderDate.Value.ToString("dd/MM/yyyy")</span>
                            </div>
                        }
                        <div class="pattern-item">
                            <span class="pattern-label">Horario Preferido:</span>
                            <span class="pattern-value">@customerPattern.PreferredOrderingTime</span>
                        </div>
                    </div>
                </div>
            }
        }
    </div>
</div>

<style>
.ai-order-processor {
    background: #000;
    border: 2px solid #fff;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 1rem;
}

.processor-header {
    background: #fff;
    color: #000;
    padding: 0.75rem 1rem;
    border-bottom: 2px solid #fff;
}

.processor-header h3 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.subtitle {
    margin: 0.25rem 0 0 0;
    font-size: 0.8rem;
    opacity: 0.7;
}

.tabs-container {
    background: #000;
}

.tab-buttons {
    display: flex;
    border-bottom: 2px solid #fff;
}

.tab-btn {
    flex: 1;
    background: #000;
    color: #fff;
    border: none;
    border-right: 1px solid #fff;
    padding: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 600;
}

.tab-btn:last-child {
    border-right: none;
}

.tab-btn.active {
    background: #fff;
    color: #000;
}

.tab-btn:hover:not(.active) {
    background: #333;
}

.input-section {
    padding: 1rem;
}

.form-group {
    margin-bottom: 0.75rem;
}

.form-control {
    width: 100%;
    background: #000;
    color: #fff;
    border: 2px solid #fff;
    border-radius: 4px;
    padding: 0.5rem;
    font-size: 0.9rem;
    font-weight: 600;
}

.form-control:focus {
    outline: none;
    border-color: #ffff00;
    box-shadow: 0 0 0 2px rgba(255, 255, 0, 0.3);
}

.ai-textarea {
    width: 100%;
    background: #000;
    color: #fff;
    border: 2px solid #fff;
    border-radius: 4px;
    padding: 0.75rem;
    font-size: 0.9rem;
    font-weight: 600;
    resize: vertical;
    margin-bottom: 0.75rem;
}

.ai-textarea:focus {
    outline: none;
    border-color: #ffff00;
    box-shadow: 0 0 0 2px rgba(255, 255, 0, 0.3);
}

.ai-textarea::placeholder {
    color: #ccc;
    font-style: italic;
}

.btn-primary-ai {
    padding: 0.75rem 1.5rem;
    border: 2px solid #fff;
    border-radius: 4px;
    font-weight: 700;
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    cursor: pointer;
    transition: all 0.2s ease;
    background: #fff;
    color: #000;
    width: 100%;
}

.btn-primary-ai:hover:not(:disabled) {
    background: #ffff00;
    border-color: #ffff00;
    color: #000;
}

.btn-primary-ai:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.result-card {
    background: #001a00;
    border-top: 2px solid #00ff00;
    margin-top: 1rem;
}

.result-header {
    background: #00ff00;
    color: #000;
    padding: 0.5rem 1rem;
    font-weight: 700;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.result-content {
    padding: 0.75rem 1rem;
    color: #fff;
    font-size: 0.9rem;
    line-height: 1.4;
    background: #000;
    border: 1px solid #00ff00;
}

.result-meta {
    padding: 0.5rem 1rem;
    background: #000;
    border: 1px solid #00ff00;
    border-top: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}

.badge {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
}

.priority-low { background: #4CAF50; color: #000; }
.priority-medium { background: #FF9800; color: #000; }
.priority-high { background: #F44336; color: #fff; }
.priority-urgent { background: #8B0000; color: #fff; }

.recommendations {
    padding: 0.75rem 1rem;
    background: #000;
    border: 1px solid #00ff00;
    border-top: none;
}

.recommendations h4 {
    color: #00ff00;
    margin: 0 0 0.5rem 0;
    font-size: 0.85rem;
}

.product-rec {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #333;
    color: #fff;
    font-size: 0.8rem;
}

.product-rec:last-child {
    border-bottom: none;
}

.price {
    font-weight: 700;
    color: #ffff00;
}

.in-stock { color: #00ff00; }
.out-stock { color: #ff0000; }

.email-preview {
    padding: 0.75rem 1rem;
    background: #000;
    border: 1px solid #00ff00;
    color: #fff;
    font-size: 0.9rem;
}

.email-body {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #111;
    border-left: 3px solid #00ff00;
}

.order-summary {
    padding: 0.75rem 1rem;
    background: #000;
    border: 1px solid #00ff00;
    color: #fff;
    font-size: 0.9rem;
}

.order-items {
    margin-bottom: 1rem;
}

.order-item {
    display: flex;
    justify-content: space-between;
    padding: 0.25rem 0;
    border-bottom: 1px solid #333;
}

.order-item:last-child {
    border-bottom: none;
}

.order-total {
    padding: 0.5rem;
    background: #111;
    border-left: 3px solid #ffff00;
    margin-bottom: 0.5rem;
}

.delivery, .payment {
    padding: 0.25rem 0;
    color: #ccc;
}

/* Phase 2 Styles - Recommendations & Analytics */
.recommendations-content {
    padding: 0.75rem 1rem;
    background: #000;
    border: 1px solid #00ff00;
    color: #fff;
    font-size: 0.9rem;
}

.recommendation-item {
    padding: 0.5rem 0;
    border-bottom: 1px solid #333;
}

.recommendation-item:last-child {
    border-bottom: none;
}

.rec-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.25rem;
}

.rec-name {
    font-weight: 700;
    color: #fff;
}

.confidence-score {
    font-weight: 700;
    color: #ffff00;
    font-size: 0.8rem;
}

.vegan-badge {
    color: #00ff00;
    font-size: 1rem;
}

.rec-reason {
    font-size: 0.8rem;
    color: #ccc;
    font-style: italic;
    line-height: 1.3;
}

.pattern-content {
    padding: 0.75rem 1rem;
    background: #000;
    border: 1px solid #00ff00;
    color: #fff;
    font-size: 0.9rem;
}

.pattern-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.3rem 0;
    border-bottom: 1px solid #333;
}

.pattern-item:last-child {
    border-bottom: none;
}

.pattern-label {
    font-weight: 600;
    color: #ccc;
}

.pattern-value {
    font-weight: 700;
    color: #fff;
}

.trend-positive {
    color: #00ff00 !important;
}

.trend-negative {
    color: #ff4444 !important;
}

.btn-secondary-ai {
    padding: 0.75rem 1.5rem;
    border: 2px solid #00ff00;
    border-radius: 4px;
    font-weight: 700;
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    cursor: pointer;
    transition: all 0.2s ease;
    background: #000;
    color: #00ff00;
    width: 100%;
    margin-top: 0.5rem;
}

.btn-secondary-ai:hover:not(:disabled) {
    background: #00ff00;
    color: #000;
}

.btn-secondary-ai:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

@@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}
</style>

@if (errorMessage != null)
{
    <div class="alert alert-danger mt-2 p-2">@errorMessage</div>
}

@code {
    private string activeTab = "order";
    private bool isProcessing = false;
    private string? errorMessage = null;

    // Chat variables
    private string conversationMessage = string.Empty;
    private string selectedCustomerId = string.Empty;
    private BusinessConversationType conversationType = BusinessConversationType.General;
    private BusinessConversationResponseDto? conversationResult = null;

    // Email variables
    private string emailCustomerId = string.Empty;
    private string emailType = "confirmacion_pedido";
    private string emailData = string.Empty;
    private BusinessEmailResponseDto? emailResult = null;

    // Complex order variables
    private string orderCustomerId = string.Empty;
    private string complexOrderText = string.Empty;
    private ComplexOrderResponseDto? complexOrderResult = null;
    
    // Phase 1 variables
    private object? enhancedOrderResult = null;
    private object? validationResult = null;
    private object? alternativesResult = null;

    // Analytics variables - Recommendations & Patterns
    private string recommendationCustomerId = string.Empty;
    private List<IntelligentRecommendation>? recommendations = null;
    private PurchasePattern? customerPattern = null;

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        errorMessage = null;
    }

    private async Task ProcessConversation()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrWhiteSpace(conversationMessage))
            {
                errorMessage = "Ingresa un mensaje para procesar.";
                return;
            }

            var command = new ProcessBusinessConversationCommand(
                conversationMessage,
                string.IsNullOrEmpty(selectedCustomerId) ? null : int.Parse(selectedCustomerId),
                null,
                conversationType
            );

            conversationResult = await Mediator.Send(command);
            
            if (!conversationResult.IsSuccessful)
            {
                errorMessage = conversationResult.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task GenerateEmail()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(emailCustomerId))
            {
                errorMessage = "Selecciona un cliente.";
                return;
            }

            var customerId = int.Parse(emailCustomerId);
            var data = string.IsNullOrEmpty(emailData) ? new { } : JsonSerializer.Deserialize<object>(emailData);
            
            emailResult = await BusinessHandler.GenerateBusinessEmail(emailType, customerId, data);
            
            if (!emailResult.IsSuccessful)
            {
                errorMessage = emailResult.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ProcessComplexOrder()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(orderCustomerId) || string.IsNullOrWhiteSpace(complexOrderText))
            {
                errorMessage = "Selecciona un cliente e ingresa el pedido.";
                return;
            }

            var customerId = int.Parse(orderCustomerId);
            var context = new BusinessContext
            {
                CustomerType = "Distribuidor",
                TypicalOrderValue = 5000,
                RecentOrderHistory = new List<string> { "Pedido anterior: Leches vegetales", "Pedido anterior: Quesos veganos" }
            };
            
            complexOrderResult = await BusinessHandler.ProcessComplexOrder(complexOrderText, customerId, context);
            
            if (!complexOrderResult.IsSuccessful)
            {
                errorMessage = complexOrderResult.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task GenerateRecommendations()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(recommendationCustomerId))
            {
                errorMessage = "Selecciona un cliente para generar recomendaciones.";
                return;
            }

            var customerId = int.Parse(recommendationCustomerId);
            
            // Simulación directa para demo - en producción usaría el servicio completo
            recommendations = GenerateMockRecommendations(customerId);
            
            if (!recommendations.Any())
            {
                errorMessage = "No se pudieron generar recomendaciones para este cliente.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task AnalyzeCustomerPattern()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(recommendationCustomerId))
            {
                errorMessage = "Selecciona un cliente para analizar patrones.";
                return;
            }

            var customerId = int.Parse(recommendationCustomerId);
            
            // Simulación de análisis de patrones - en producción vendría de la base de datos
            var mockOrders = GenerateMockOrderHistory(customerId);
            var patternAnalyzer = new PurchasePatternAnalyzer(AIService);
            customerPattern = await patternAnalyzer.AnalyzeCustomerPatterns(customerId, mockOrders);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private List<Order> GenerateMockOrderHistory(int customerId)
    {
        // Simulación de historial de pedidos para demostración
        return customerId switch
        {
            1 => new List<Order> // VegaMart - Cliente regular
            {
                new Order { Id = 1, CustomerId = 1, CreatedAt = DateTime.Now.AddDays(-30), TotalAmount = 180 },
                new Order { Id = 2, CustomerId = 1, CreatedAt = DateTime.Now.AddDays(-60), TotalAmount = 220 },
                new Order { Id = 3, CustomerId = 1, CreatedAt = DateTime.Now.AddDays(-90), TotalAmount = 195 },
                new Order { Id = 4, CustomerId = 1, CreatedAt = DateTime.Now.AddDays(-120), TotalAmount = 165 }
            },
            2 => new List<Order> // EcoTienda - Cliente premium con crecimiento
            {
                new Order { Id = 5, CustomerId = 2, CreatedAt = DateTime.Now.AddDays(-25), TotalAmount = 450 },
                new Order { Id = 6, CustomerId = 2, CreatedAt = DateTime.Now.AddDays(-50), TotalAmount = 380 },
                new Order { Id = 7, CustomerId = 2, CreatedAt = DateTime.Now.AddDays(-75), TotalAmount = 320 },
                new Order { Id = 8, CustomerId = 2, CreatedAt = DateTime.Now.AddDays(-100), TotalAmount = 280 }
            },
            3 => new List<Order> // RestauranteVerde - Bulk orders semanales
            {
                new Order { Id = 9, CustomerId = 3, CreatedAt = DateTime.Now.AddDays(-7), TotalAmount = 850 },
                new Order { Id = 10, CustomerId = 3, CreatedAt = DateTime.Now.AddDays(-14), TotalAmount = 920 },
                new Order { Id = 11, CustomerId = 3, CreatedAt = DateTime.Now.AddDays(-21), TotalAmount = 780 },
                new Order { Id = 12, CustomerId = 3, CreatedAt = DateTime.Now.AddDays(-28), TotalAmount = 890 }
            },
            _ => new List<Order>()
        };
    }

    private async Task ProcessEnhancedOrder()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(orderCustomerId) || string.IsNullOrWhiteSpace(complexOrderText))
            {
                errorMessage = "Selecciona un cliente e ingresa el pedido.";
                return;
            }

            // Mock catalog para demo
            var catalogJson = @"""
            [
                {""id"": 1, ""name"": ""Leche de Avena Silk"", ""price"": 45.50, ""stock"": 100},
                {""id"": 2, ""name"": ""Queso Vegano Violife"", ""price"": 85.00, ""stock"": 50},
                {""id"": 3, ""name"": ""Pan Integral Orgánico"", ""price"": 25.00, ""stock"": 200}
            ]
            """;

            // Usar AIService directamente para demo
            enhancedOrderResult = await AIService.ProcessEnhancedOrderAsync(catalogJson, complexOrderText);
            
            complexOrderResult = null; // Clear old results
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error procesando pedido: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ValidateAndSuggestAlternatives()
    {
        errorMessage = null;
        isProcessing = true;
        StateHasChanged();

        try
        {
            if (enhancedOrderResult == null)
            {
                errorMessage = "Primero procesa un pedido con procesamiento inteligente.";
                return;
            }

            // Mock validation y alternatives para demo
            var mockOrderItems = new List<object>
            {
                new { ProductId = 1, Quantity = 25 },
                new { ProductId = 2, Quantity = 10 }
            };

            validationResult = await AIService.ValidateProductAvailabilityAsync(mockOrderItems, "mock-context");

            // Si hay productos no disponibles, generar alternativas
            var unavailableIds = new List<int> { 2 }; // Simulado
            var availableProductsJson = @"""
            [
                {""id"": 4, ""name"": ""Queso Vegano Alternativo"", ""price"": 80.00, ""category"": ""Lacteos"", ""stock"": 30},
                {""id"": 5, ""name"": ""Pan Multi-grano"", ""price"": 25.00, ""category"": ""Panaderia"", ""stock"": 40}
            ]
            """;

            alternativesResult = await AIService.GenerateAlternativeProductsAsync(unavailableIds, availableProductsJson);

        }
        catch (Exception ex)
        {
            errorMessage = $"Error en validación: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private List<IntelligentRecommendation> GenerateMockRecommendations(int customerId)
    {
        return customerId switch
        {
            1 => new List<IntelligentRecommendation> // VegaMart - Enfoque en lácteos
            {
                new IntelligentRecommendation
                {
                    ProductName = "Helado Vegano Chocolate Premium",
                    ConfidenceScore = 0.89,
                    ReasonForRecommendation = "Complementa tu historial de lácteos veganos. Los helados tienen alta demanda en temporada actual.",
                    IsVegan = true
                },
                new IntelligentRecommendation
                {
                    ProductName = "Mantequilla Vegana Artesanal",
                    ConfidenceScore = 0.82,
                    ReasonForRecommendation = "Producto complementario a leches vegetales. Margen alto y creciente demanda.",
                    IsVegan = true
                },
                new IntelligentRecommendation
                {
                    ProductName = "Cereal Granola Orgánico",
                    ConfidenceScore = 0.76,
                    ReasonForRecommendation = "Cross-sell ideal con leches de avena. Incrementa valor promedio del carrito 35%.",
                    IsVegan = true
                }
            },
            2 => new List<IntelligentRecommendation> // EcoTienda - Cliente premium
            {
                new IntelligentRecommendation
                {
                    ProductName = "Trufa Vegana Gourmet Collection",
                    ConfidenceScore = 0.94,
                    ReasonForRecommendation = "Perfil de cliente premium. Producto exclusivo con margen alto del 60%.",
                    IsVegan = true
                },
                new IntelligentRecommendation
                {
                    ProductName = "Queso Vegano Aged Reserve",
                    ConfidenceScore = 0.88,
                    ReasonForRecommendation = "Up-selling oportunity. Versión premium de productos actuales.",
                    IsVegan = true
                },
                new IntelligentRecommendation
                {
                    ProductName = "Vino Vegano Biológico",
                    ConfidenceScore = 0.85,
                    ReasonForRecommendation = "Expansión de categoría. Cliente sofisticado con poder adquisitivo alto.",
                    IsVegan = true
                }
            },
            3 => new List<IntelligentRecommendation> // RestauranteVerde - Bulk/food service
            {
                new IntelligentRecommendation
                {
                    ProductName = "Tofu Orgánico Bulk 5kg",
                    ConfidenceScore = 0.92,
                    ReasonForRecommendation = "Formato foodservice. Proteína versátil para menú restaurante. Costo-beneficio óptimo.",
                    IsVegan = true
                },
                new IntelligentRecommendation
                {
                    ProductName = "Aceite Coco Virgin Bulk 2L",
                    ConfidenceScore = 0.86,
                    ReasonForRecommendation = "Esencial para cocina vegana profesional. Pedidos semanales sugieren alta rotación.",
                    IsVegan = true
                },
                new IntelligentRecommendation
                {
                    ProductName = "Seitan Artesanal Premium 2kg",
                    ConfidenceScore = 0.80,
                    ReasonForRecommendation = "Alternativa proteica premium para platos especiales. Diferenciación competitiva.",
                    IsVegan = true
                }
            },
            _ => new List<IntelligentRecommendation>()
        };
    }
}
