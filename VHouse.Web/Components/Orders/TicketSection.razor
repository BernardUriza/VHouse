@using System.Text
@using System.Globalization
@inject IJSRuntime JSRuntime
@* @inject ICustomerService CustomerService *@
@* @inject IOrderService OrderService *@

<div class="pos-order-header">
    <div class="order-controls">
        <div class="control-group">
            <label>CLIENTE</label>
            <select class="pos-select large" @bind="selectedCustomerId">
                <option value="">WALK-IN</option>
                @foreach (var customer in customers)
                {
                    <option value="@customer.Id">@customer.CustomerName</option>
                }
            </select>
        </div>
        <div class="price-type-buttons">
            <button type="button" class="price-btn @(selectedPriceType == "public" ? "active" : "")" 
                    @onclick='() => SetPriceType("public")'>PÚBLICO</button>
            <button type="button" class="price-btn @(selectedPriceType == "retail" ? "active" : "")" 
                    @onclick='() => SetPriceType("retail")'>POS</button>
            <button type="button" class="price-btn @(selectedPriceType == "cost" ? "active" : "")" 
                    @onclick='() => SetPriceType("cost")'>COSTO</button>
        </div>
    </div>
</div>

@if (ticket.Any())
{
    <div class="pos-ticket">
        <div class="ticket-header">
            <span>PRODUCTO</span>
            <span>CANT</span>
            <span>PRECIO</span>
            <span>TOTAL</span>
            <span></span>
        </div>
        @foreach (var item in ticket.Values)
        {
            <div class="ticket-row">
                <span class="product-name">@item.Product.ProductName</span>
                <div class="qty-controls">
                    <button class="qty-btn minus" @onclick="() => DecrementQuantity(item)">−</button>
                    <input type="number" min="1" class="qty-input" 
                           @bind="item.Quantity" @bind:event="oninput" @onchange="UpdateTotal">
                    <button class="qty-btn plus" @onclick="() => IncrementQuantity(item)">+</button>
                </div>
                <span class="price">@item.UnitPrice.ToString("C", new CultureInfo("es-MX"))</span>
                <span class="total">@((item.UnitPrice * item.Quantity).ToString("C", new CultureInfo("es-MX")))</span>
                <button class="remove-btn" @onclick="() => RemoveFromTicket(item.Product)">×</button>
            </div>
        }
    </div>

    <div class="pos-totals">
        <div class="quick-discounts">
            <span class="discount-label">DESCUENTOS RÁPIDOS:</span>
            <button class="discount-btn @(discount == 0 ? "active" : "")" @onclick="() => ApplyDiscount(0)">0%</button>
            <button class="discount-btn @(discount == 5 ? "active" : "")" @onclick="() => ApplyDiscount(5)">5%</button>
            <button class="discount-btn @(discount == 10 ? "active" : "")" @onclick="() => ApplyDiscount(10)">10%</button>
            <button class="discount-btn @(discount == 15 ? "active" : "")" @onclick="() => ApplyDiscount(15)">15%</button>
            <input type="number" step="0.1" class="custom-discount" placeholder="Otro %" 
                   @bind="discount" @bind:event="oninput" @onchange="UpdateTotal" />
        </div>
        
        <div class="totals-summary">
            <div class="summary-row">
                <span>SUBTOTAL:</span>
                <span>@Subtotal.ToString("C", new CultureInfo("es-MX"))</span>
            </div>
            @if (discount > 0)
            {
                <div class="summary-row discount">
                    <span>DESCUENTO (@discount%):</span>
                    <span>-@DiscountAmount.ToString("C", new CultureInfo("es-MX"))</span>
                </div>
            }
            @if (shippingCost > 0)
            {
                <div class="summary-row">
                    <span>ENVÍO:</span>
                    <span>@shippingCost.ToString("C", new CultureInfo("es-MX"))</span>
                </div>
            }
            <div class="summary-total">
                <span>TOTAL:</span>
                <span>@TotalPrice.ToString("C", new CultureInfo("es-MX"))</span>
            </div>
        </div>
        
        <div class="shipping-toggle">
            <label class="toggle-label">
                <input type="checkbox" @onchange="ToggleShipping" />
                <span class="toggle-text">AGREGAR ENVÍO</span>
            </label>
            @if (includeShipping)
            {
                <input type="number" step="0.01" class="shipping-input" 
                       @bind="shippingCost" @bind:event="oninput" @onchange="UpdateTotal" placeholder="Costo" />
            }
        </div>
    </div>

    <div class="pos-actions">
        @if (isOrderGenerated)
        {
            <div class="action-buttons">
                <button class="pos-btn primary" @onclick="CopyToClipboard">COPIAR</button>
                <button class="pos-btn danger" @onclick="DeleteOrder">ELIMINAR</button>
            </div>
            <div class="order-summary">
                <textarea class="summary-text" rows="4" readonly>@GenerateOrderText()</textarea>
            </div>
        }
        else
        {
            <button class="pos-btn primary full-width" @onclick="ConfirmSaveOrder">GUARDAR PEDIDO</button>
        }
    </div>
}
else
{
    <div class="no-ticket">No hay productos en el ticket</div>
}

@code {
    private List<Customer> customers = new();
    private string? selectedCustomerId;
    private DateTime? deliveryDate = DateTime.Now;
    private string selectedPriceType = "public";
    private bool isOrderGenerated = false;
    private decimal discount = 0;
    private decimal shippingCost = 0;
    private bool includeShipping = false;

    [Parameter]
    public Dictionary<int, VHouse.Domain.Entities.OrderItem> ticket { get; set; } = new();

    private decimal Subtotal => ticket.Values.Sum(item => item.UnitPrice * item.Quantity);
    private decimal DiscountAmount => (discount / 100) * Subtotal;
    private decimal TotalPrice => Subtotal - DiscountAmount + shippingCost;

    protected override void OnInitialized()
    {
        // customers = await CustomerService.GetCustomersAsync(); // Commented out until CustomerService is available
        customers = new List<Customer>(); // Placeholder
    }

    private void SaveOrder()
    {
        if (!deliveryDate.HasValue) return;

        var order = new Order
            {
                CustomerId = string.IsNullOrEmpty(selectedCustomerId) ? 1 : int.Parse(selectedCustomerId), // Default customer ID for walk-ins
                TotalAmount = TotalPrice,
                Status = VHouse.Domain.Enums.OrderStatus.Pending,
                Notes = $"Price Type: {selectedPriceType}, Delivery: {deliveryDate?.ToString()}",
                OrderItems = ticket.Values.Select(item => new VHouse.Domain.Entities.OrderItem
                {
                    ProductId = item.ProductId,
                    UnitPrice = item.UnitPrice,
                    Quantity = item.Quantity
                }).ToList()
            };
        // isOrderGenerated = await OrderService.ProcessOrderAsync(order); // Commented out until OrderService is available
        isOrderGenerated = true; // Placeholder
    }

    private void OnPriceTypeChanged(ChangeEventArgs e)
    {
        selectedPriceType = e.Value?.ToString() ?? "public";
        UpdatePricesByPriceType();
    }

    public void UpdatePricesByPriceType()
    {
        foreach (var item in ticket.Values)
        {
            item.UnitPrice = GetPriceForType(item.Product);
        }
        StateHasChanged(); 
    }

    private async Task ConfirmSaveOrder()
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Guardar el pedido?");
        if (confirm)
        {
            SaveOrder();
        }
    }
    private void UpdateTicketPrices(ChangeEventArgs args)
    {
        foreach (var item in ticket.Values)
        {
            item.UnitPrice = GetPriceForType(item.Product);
        }
        StateHasChanged(); // Refresh UI
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GenerateOrderText());
    }

    private void DeleteOrder()
    {
        ticket.Clear();
        isOrderGenerated = false;
    }

    private decimal GetPriceForType(Product product) =>
        selectedPriceType switch
        {
            "retail" => product.PriceRetail,
            "cost" => product.PriceCost,
            _ => product.PricePublic
        };

    // Métodos mejorados para UX optimizada
    private void SetPriceType(string priceType)
    {
        selectedPriceType = priceType;
        UpdatePricesByPriceType();
    }

    private void IncrementQuantity(VHouse.Domain.Entities.OrderItem item)
    {
        item.Quantity++;
        UpdateTotal(null);
    }

    private void DecrementQuantity(VHouse.Domain.Entities.OrderItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
            UpdateTotal(null);
        }
    }

    private void ApplyDiscount(decimal discountPercent)
    {
        discount = discountPercent;
        StateHasChanged();
    }

    private void ToggleShipping(ChangeEventArgs args)
    {
        includeShipping = (bool)args.Value!;
        if (!includeShipping)
        {
            shippingCost = 0;
        }
        else
        {
            shippingCost = 50; // Valor por defecto
        }
        StateHasChanged();
    }

    private void UpdateTotal(ChangeEventArgs args) => StateHasChanged();

    private void RemoveFromTicket(Product product)
    {
        if (ticket.ContainsKey(product.Id))
        {
            ticket.Remove(product.Id);
        }
    }

    private string GenerateOrderText()
    {
        var sb = new StringBuilder();
        sb.AppendLine("📦 *Pedido Generado:*");

        // List of ordered products
        foreach (var item in ticket.Values)
        {
            sb.AppendLine($"- {item.Product.ProductName} (x{item.Quantity}): {item.UnitPrice.ToString("C", new CultureInfo("es-MX"))}");
        }

        // Order details
        sb.AppendLine();
        if (Subtotal < TotalPrice)
            sb.AppendLine($"🟢 *Subtotal:* {Subtotal.ToString("C", new CultureInfo("es-MX"))}");
        if (discount > 0)
            sb.AppendLine($"🎟 *Descuento ({discount}%):* -{DiscountAmount.ToString("C", new CultureInfo("es-MX"))}");
        if (discount > 0)
            sb.AppendLine($"🚛 *Costo de Envío:* {shippingCost.ToString("C", new CultureInfo("es-MX"))}");
        sb.AppendLine($"📅 *Entrega:* {deliveryDate?.ToString("dddd dd MMMM yyyy HH:mm", new CultureInfo("es-MX"))}");
        sb.AppendLine($"✅ *Total a Pagar:* {TotalPrice.ToString("C", new CultureInfo("es-MX"))}");

        return sb.ToString();
    }
}
