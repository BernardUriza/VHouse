@page "/orders"
@using VHouse.Domain.Entities
@using VHouse.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using VHouse.Web.Components.Shared
@inject VHouseDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Orders Report - VHouse</PageTitle>

<div class="container-fluid">
    <div class="page-header">
        <h1>üìä Orders Report</h1>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="RefreshOrders">
                üîÑ Refresh
            </button>
            <button class="btn btn-success" @onclick="ExportToCSV">
                üì• Export CSV
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading orders...</span>
            </div>
            <p class="mt-3">Loading orders...</p>
        </div>
    }
    else if (!orders.Any())
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No Orders Found</h4>
            <p>There are no orders in the system yet. Start by creating orders in the <a href="/pos">Point of Sale</a> system.</p>
        </div>
    }
    else
    {
        <div class="stats-cards mb-4">
            <div class="stat-card">
                <div class="stat-value">@orders.Count</div>
                <div class="stat-label">Total Orders</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@totalRevenue.ToString("C")</div>
                <div class="stat-label">Total Revenue</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@todayOrders</div>
                <div class="stat-label">Today's Orders</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@averageOrderValue.ToString("C")</div>
                <div class="stat-label">Average Order</div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Order #</th>
                        <th>Date</th>
                        <th>Customer</th>
                        <th>Items</th>
                        <th>Total</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td><strong>#@order.Id</strong></td>
                            <td>@order.OrderDate.ToString("MM/dd/yyyy HH:mm")</td>
                            <td>
                                @if (order.Customer != null)
                                {
                                    <span>@order.Customer.CustomerName</span>
                                }
                                else
                                {
                                    <span class="text-muted">Walk-in</span>
                                }
                            </td>
                            <td>@order.OrderItems.Count items</td>
                            <td><strong>@order.TotalAmount.ToString("C")</strong></td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(order.Status.ToString())">
                                    @order.Status.ToString()
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => ShowOrderDetails(order)">
                                    üëÅ View
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (selectedOrder != null)
{
    <VHouse.Web.Components.Orders.OrderDetailsModal Order="selectedOrder" OnClose="CloseModal" />
}

<style>
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--border-color);
    }

    .header-actions {
        display: flex;
        gap: 1rem;
    }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: var(--background);
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        padding: 1.5rem;
        text-align: center;
        transition: transform 0.2s, box-shadow 0.2s;
    }

    .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary);
        margin-bottom: 0.5rem;
    }

    .stat-label {
        font-size: 0.875rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .table {
        background: var(--background);
        border-radius: var(--radius-md);
        overflow: hidden;
    }

    .table thead {
        background: var(--background-secondary);
    }

    .table th {
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.875rem;
        letter-spacing: 0.5px;
        padding: 1rem;
        border: none;
    }

    .table td {
        padding: 1rem;
        vertical-align: middle;
        border-color: var(--border-color);
    }

    .badge {
        padding: 0.5rem 1rem;
        font-weight: 500;
        border-radius: var(--radius-sm);
    }

    .badge-success {
        background-color: var(--success);
        color: white;
    }

    .badge-warning {
        background-color: var(--warning);
        color: white;
    }

    .badge-info {
        background-color: var(--info);
        color: white;
    }

    .badge-danger {
        background-color: var(--danger);
        color: white;
    }

    .btn {
        border-radius: var(--radius-sm);
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
    }

    .btn-primary {
        background: var(--primary);
        border: none;
        color: white;
    }

    .btn-success {
        background: var(--success);
        border: none;
        color: white;
    }

    .btn-info {
        background: var(--info);
        border: none;
        color: white;
    }
</style>

@code {
    private List<Order> orders = new();
    private Order? selectedOrder;
    private bool isLoading = true;
    private decimal totalRevenue;
    private int todayOrders;
    private decimal averageOrderValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            orders = await DbContext.Orders
                .Include(o => o.Customer)
                .Include(o => o.OrderItems)
                    .ThenInclude(oi => oi.Product)
                .OrderByDescending(o => o.OrderDate)
                .ToListAsync();

            CalculateStatistics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateStatistics()
    {
        if (orders.Any())
        {
            totalRevenue = orders.Sum(o => o.TotalAmount);
            todayOrders = orders.Count(o => o.OrderDate.Date == DateTime.Today);
            averageOrderValue = totalRevenue / orders.Count;
        }
        else
        {
            totalRevenue = 0;
            todayOrders = 0;
            averageOrderValue = 0;
        }
    }

    private async Task RefreshOrders()
    {
        await LoadOrders();
    }

    private void ShowOrderDetails(Order order)
    {
        selectedOrder = order;
        StateHasChanged();
    }

    private void CloseModal()
    {
        selectedOrder = null;
        StateHasChanged();
    }

    private string GetStatusBadgeClass(string? status)
    {
        return status?.ToLower() switch
        {
            "completed" or "complete" => "badge-success",
            "pending" => "badge-warning",
            "processing" => "badge-info",
            "cancelled" => "badge-danger",
            _ => "badge-secondary"
        };
    }

    private async Task ExportToCSV()
    {
        try
        {
            var csv = new System.Text.StringBuilder();
            csv.AppendLine("Order ID,Date,Customer,Items,Total,Status");
            
            foreach (var order in orders)
            {
                var customerName = order.Customer?.CustomerName ?? "Walk-in";
                csv.AppendLine($"{order.Id},{order.OrderDate:yyyy-MM-dd HH:mm},{customerName},{order.OrderItems.Count},{order.TotalAmount},{order.Status}");
            }

            var fileName = $"orders_report_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
            var base64 = Convert.ToBase64String(bytes);
            
            // Create a data URL for download
            var dataUrl = $"data:text/csv;base64,{base64}";
            await JSRuntime.InvokeVoidAsync("eval", $"const a = document.createElement('a'); a.href = '{dataUrl}'; a.download = '{fileName}'; a.click();");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting CSV: {ex.Message}");
        }
    }

    private object GetOrdersContextData()
    {
        return new
        {
            orders = orders,
            totalRevenue = totalRevenue,
            todayOrders = todayOrders,
            averageOrderValue = averageOrderValue,
            orderCount = orders.Count,
            productsInOrders = orders.SelectMany(o => o.OrderItems).Select(oi => oi.Product).Distinct().ToList()
        };
    }
}

<!-- ü§ñ CHATBOT CONTEXTUAL PARA ORDERS -->
<IntelligentChatbot ContextData="@GetOrdersContextData()" />

@* Created by Bernard Uriza Orozco *@