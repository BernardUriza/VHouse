@page "/product"
@rendermode @(new InteractiveServerRenderMode())
@using MediatR
@using VHouse.Application.Commands
@inject IMediator Mediator
@* @inject IProductService ProductService *@

<link href="~/css/products.css" rel="stylesheet" />

<div class="product-management">
    <div class="management-header">
        <h2>🌱 Gestión de Productos</h2>
    </div>

    <div class="product-creator">
        <div class="creator-header">
            <h3>➕ Crear Producto</h3>
        </div>
        
        <div class="creator-content">
            <div class="form-grid">
                <div class="form-field">
                    <label>Nombre del Producto</label>
                    <input type="text" @bind="newProductName" placeholder="Ej. Queso Vegano Artesanal" />
                </div>
                
                <div class="form-field">
                    <label>Precio Público</label>
                    <input type="number" step="0.01" @bind="newPricePublic" placeholder="150.00" />
                </div>
                
                <div class="form-field">
                    <label>Precio POS</label>
                    <input type="number" step="0.01" @bind="newPriceRetail" placeholder="140.00" />
                </div>
                
                <div class="form-field">
                    <label>Costo</label>
                    <input type="number" step="0.01" @bind="newPriceCost" placeholder="100.00" />
                </div>
            </div>
            
            <div class="ai-section">
                <div class="ai-generator">
                    <div class="ai-header">
                        <h4>🤖 Generador de Descripción IA</h4>
                    </div>
                    
                    <div class="ai-content">
                        <textarea @bind="aiGeneratedDescription" 
                                placeholder="Descripción generada automáticamente aparecerá aquí..." 
                                rows="3" readonly></textarea>
                        
                        <div class="ai-buttons">
                            <button class="btn-generate" @onclick="GenerateAIDescription" disabled="@isGeneratingDescription">
                                @if (isGeneratingDescription)
                                {
                                    <span class="loading">⏳ Generando</span>
                                }
                                else
                                {
                                    <span>🚀 Generar IA</span>
                                }
                            </button>
                            
                            @if (!string.IsNullOrEmpty(aiGeneratedDescription))
                            {
                                <button class="btn-clear" @onclick="ClearAIDescription">🗑️</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="form-actions">
                <button class="btn-create" @onclick="async () => await AddProduct()">
                    ✨ Crear Producto
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.product-management {
    max-width: 1000px;
    margin: 0 auto;
}

.management-header {
    background: #000;
    color: #fff;
    padding: 1.5rem;
    border: 2px solid #fff;
    border-radius: 8px;
    margin-bottom: 1.5rem;
    text-align: center;
}

.management-header h2 {
    margin: 0;
    font-size: 1.8rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.product-creator {
    background: #000;
    border: 2px solid #fff;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 2rem;
}

.creator-header {
    background: #fff;
    color: #000;
    padding: 1rem 1.5rem;
    border-bottom: 2px solid #fff;
}

.creator-header h3 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.creator-content {
    padding: 1.5rem;
}

.form-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.form-field {
    display: flex;
    flex-direction: column;
}

.form-field label {
    color: #fff;
    font-weight: 700;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    margin-bottom: 0.5rem;
}

.form-field input {
    background: #000;
    color: #fff;
    border: 2px solid #fff;
    border-radius: 4px;
    padding: 0.75rem;
    font-size: 0.9rem;
    font-weight: 600;
    transition: all 0.2s ease;
}

.form-field input:focus {
    outline: none;
    border-color: #ffff00;
    box-shadow: 0 0 0 2px rgba(255, 255, 0, 0.3);
}

.form-field input::placeholder {
    color: #ccc;
    font-style: italic;
}

.ai-section {
    margin-bottom: 1.5rem;
}

.ai-generator {
    background: #001a00;
    border: 2px solid #00ff00;
    border-radius: 6px;
    overflow: hidden;
}

.ai-header {
    background: #00ff00;
    color: #000;
    padding: 0.75rem 1rem;
    border-bottom: 2px solid #00ff00;
}

.ai-header h4 {
    margin: 0;
    font-size: 1rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.3px;
}

.ai-content {
    padding: 1rem;
}

.ai-content textarea {
    width: 100%;
    background: #000;
    color: #fff;
    border: 2px solid #00ff00;
    border-radius: 4px;
    padding: 0.75rem;
    font-size: 0.9rem;
    resize: vertical;
    margin-bottom: 0.75rem;
}

.ai-content textarea:focus {
    outline: none;
    border-color: #ffff00;
    box-shadow: 0 0 0 2px rgba(255, 255, 0, 0.2);
}

.ai-content textarea::placeholder {
    color: #ccc;
    font-style: italic;
}

.ai-buttons {
    display: flex;
    gap: 0.5rem;
    align-items: center;
}

.btn-generate {
    background: #00ff00;
    color: #000;
    border: 2px solid #00ff00;
    border-radius: 4px;
    padding: 0.6rem 1rem;
    font-weight: 700;
    font-size: 0.85rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    cursor: pointer;
    transition: all 0.2s ease;
    flex: 1;
}

.btn-generate:hover:not(:disabled) {
    background: #fff;
    border-color: #fff;
    color: #000;
}

.btn-generate:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.btn-clear {
    background: #ff4444;
    color: #fff;
    border: 2px solid #ff4444;
    border-radius: 4px;
    padding: 0.6rem 0.8rem;
    font-weight: 700;
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.btn-clear:hover {
    background: #fff;
    color: #ff4444;
    border-color: #fff;
}

.form-actions {
    text-align: center;
}

.btn-create {
    background: #fff;
    color: #000;
    border: 2px solid #fff;
    border-radius: 6px;
    padding: 1rem 2rem;
    font-weight: 700;
    font-size: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 200px;
}

.btn-create:hover {
    background: #ffff00;
    border-color: #ffff00;
    color: #000;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 255, 0, 0.4);
}

@media (max-width: 768px) {
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .ai-buttons {
        flex-direction: column;
    }
    
    .btn-generate {
        width: 100%;
    }
}
</style>

<div class="products-inventory">
    <div class="inventory-header">
        <h3>📦 Inventario de Productos</h3>
    </div>
    
    @if (products.Any())
    {
        <div class="inventory-grid">
            @foreach (var product in products)
            {
                <div class="product-item @(product == productBeingEdited ? "editing" : "")">
                    <div class="product-id">#@product.Id</div>
                    
                    <div class="product-details">
                        @if (product == productBeingEdited)
                        {
                            <input type="text" class="edit-input" @bind="product.ProductName" />
                            <div class="price-edit-grid">
                                <input type="number" step="0.01" class="edit-input" @bind="product.PricePublic" placeholder="Público" />
                                <input type="number" step="0.01" class="edit-input" @bind="product.PriceRetail" placeholder="POS" />
                                <input type="number" step="0.01" class="edit-input" @bind="product.PriceCost" placeholder="Costo" />
                            </div>
                        }
                        else
                        {
                            <div class="product-name">@product.ProductName</div>
                            <div class="product-prices">
                                <div class="price-item">
                                    <span class="price-label">Público</span>
                                    <span class="price-value">@product.PricePublic.ToString("C")</span>
                                </div>
                                <div class="price-item">
                                    <span class="price-label">POS</span>
                                    <span class="price-value">@product.PriceRetail.ToString("C")</span>
                                </div>
                                <div class="price-item">
                                    <span class="price-label">Costo</span>
                                    <span class="price-value">@product.PriceCost.ToString("C")</span>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <div class="product-actions">
                        @if (product == productBeingEdited)
                        {
                            <button class="btn-save" @onclick="async () => await SaveEdit(product)">💾</button>
                            <button class="btn-cancel" @onclick="CancelEdit">❌</button>
                        }
                        else
                        {
                            <button class="btn-edit" @onclick="() => EditProduct(product)">✏️</button>
                            <button class="btn-delete" @onclick="async () => await DeleteProduct(product)">🗑️</button>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-inventory">
            <div class="empty-icon">🌱</div>
            <div class="empty-text">No hay productos en el inventario</div>
            <div class="empty-subtitle">Crea tu primer producto vegano arriba</div>
        </div>
    }
</div>

<style>
.products-inventory {
    margin-top: 2rem;
}

.inventory-header {
    background: #000;
    color: #fff;
    padding: 1rem 1.5rem;
    border: 2px solid #fff;
    border-radius: 8px;
    margin-bottom: 1rem;
    text-align: center;
}

.inventory-header h3 {
    margin: 0;
    font-size: 1.3rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.inventory-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1rem;
}

.product-item {
    background: #000;
    border: 2px solid #fff;
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.2s ease;
}

.product-item:hover {
    border-color: #ffff00;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(255, 255, 0, 0.2);
}

.product-item.editing {
    border-color: #00ff00;
    background: #001a00;
}

.product-id {
    background: #fff;
    color: #000;
    padding: 0.5rem 1rem;
    font-weight: 700;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
    border-bottom: 2px solid #fff;
}

.product-item.editing .product-id {
    background: #00ff00;
}

.product-details {
    padding: 1rem;
}

.product-name {
    color: #fff;
    font-weight: 700;
    font-size: 1.1rem;
    margin-bottom: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.3px;
}

.product-prices {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.75rem;
}

.price-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

.price-label {
    color: #ccc;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.2px;
    margin-bottom: 0.25rem;
}

.price-value {
    color: #fff;
    font-weight: 700;
    font-size: 1rem;
}

.edit-input {
    width: 100%;
    background: #000;
    color: #fff;
    border: 2px solid #00ff00;
    border-radius: 4px;
    padding: 0.5rem;
    font-size: 0.9rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.edit-input:focus {
    outline: none;
    border-color: #ffff00;
    box-shadow: 0 0 0 2px rgba(255, 255, 0, 0.2);
}

.price-edit-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
}

.product-actions {
    padding: 1rem;
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    border-top: 2px solid #fff;
}

.product-item.editing .product-actions {
    border-top-color: #00ff00;
}

.btn-edit, .btn-delete, .btn-save, .btn-cancel {
    padding: 0.6rem 0.8rem;
    border: 2px solid;
    border-radius: 4px;
    font-weight: 700;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.2s ease;
    flex: 1;
}

.btn-edit {
    background: #fff;
    color: #000;
    border-color: #fff;
}

.btn-edit:hover {
    background: #ffff00;
    border-color: #ffff00;
}

.btn-delete {
    background: #ff4444;
    color: #fff;
    border-color: #ff4444;
}

.btn-delete:hover {
    background: #fff;
    color: #ff4444;
    border-color: #fff;
}

.btn-save {
    background: #00ff00;
    color: #000;
    border-color: #00ff00;
}

.btn-save:hover {
    background: #fff;
    border-color: #fff;
}

.btn-cancel {
    background: #000;
    color: #fff;
    border-color: #fff;
}

.btn-cancel:hover {
    background: #fff;
    color: #000;
}

.empty-inventory {
    text-align: center;
    padding: 3rem 2rem;
    background: #000;
    border: 2px solid #fff;
    border-radius: 8px;
}

.empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
}

.empty-text {
    color: #fff;
    font-size: 1.3rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.5rem;
}

.empty-subtitle {
    color: #ccc;
    font-size: 1rem;
    font-style: italic;
}

@media (max-width: 768px) {
    .inventory-grid {
        grid-template-columns: 1fr;
    }
    
    .product-prices {
        grid-template-columns: 1fr;
    }
    
    .price-edit-grid {
        grid-template-columns: 1fr;
    }
    
    .product-actions {
        flex-direction: column;
    }
}
</style>

@code {
    private List<Product> products = new();
    private string newProductName = string.Empty;
    private decimal newPricePublic, newPriceRetail, newPriceCost;
    private Product? productBeingEdited = null;
    
    // AI Integration
    private string aiGeneratedDescription = string.Empty;
    private bool isGeneratingDescription = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        // products = await ProductService.GetProductsAsync(); // Commented out until ProductService is available
        products = new List<Product>(); // Placeholder
    }

    private async Task AddProduct()
    {
        if (string.IsNullOrWhiteSpace(newProductName) || newPricePublic <= 0 || newPriceRetail <= 0 || newPriceCost <= 0)
        {
            return; // Opcionalmente, muestra un mensaje de error.
        }

        var newProduct = new Product
            {
                ProductName = newProductName,
                PricePublic = newPricePublic,
                PriceRetail = newPriceRetail,
                PriceCost = newPriceCost
            };

        // await ProductService.AddProductAsync(newProduct); // Commented out until ProductService is available
        await LoadProductsAsync();

        newProductName = string.Empty;
        newPricePublic = 0;
        newPriceRetail = 0;
        newPriceCost = 0;
    }

    private void EditProduct(Product product)
    {
        productBeingEdited = product;
    }

    private async Task SaveEdit(Product product)
    {
        // await ProductService.UpdateProductAsync(product); // Commented out until ProductService is available
        productBeingEdited = null;
        await LoadProductsAsync();
    }

    private void CancelEdit()
    {
        productBeingEdited = null;
    }

    private async Task DeleteProduct(Product product)
    {
        // await ProductService.DeleteProductAsync(product.Id); // Commented out until ProductService is available
        await LoadProductsAsync();
    }

    // AI Methods
    private async Task GenerateAIDescription()
    {
        if (string.IsNullOrWhiteSpace(newProductName) || newPriceRetail <= 0)
        {
            return;
        }

        isGeneratingDescription = true;
        StateHasChanged();

        try
        {
            var command = new GenerateProductDescriptionCommand(
                newProductName,
                newPriceRetail,
                "Vegano" // Categoría por defecto para productos veganos
            );

            var response = await Mediator.Send(command);
            
            if (response.IsSuccessful)
            {
                aiGeneratedDescription = response.Content;
            }
            else
            {
                aiGeneratedDescription = $"Error generando descripción: {response.ErrorMessage}";
            }
        }
        catch (Exception ex)
        {
            aiGeneratedDescription = $"Error: {ex.Message}";
        }
        finally
        {
            isGeneratingDescription = false;
            StateHasChanged();
        }
    }

    private void ClearAIDescription()
    {
        aiGeneratedDescription = string.Empty;
    }
}
