@page "/consignments"
@rendermode @(new InteractiveServerRenderMode())
@using MediatR
@using VHouse.Application.Commands
@using VHouse.Application.Queries
@using VHouse.Application.DTOs
@inject IMediator Mediator
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Consignaciones - VHouse</PageTitle>

<div class="consignments-page">
    <div class="page-header">
        <div class="header-content">
            <h1>ü§ù Sistema de Consignaciones</h1>
            <p class="subtitle">Gestiona productos en consignaci√≥n con tus clientes</p>
        </div>
        <div class="header-actions">
            <button class="btn btn-success" @onclick="OpenCreateModal">
                ‚ûï Nueva Consignaci√≥n
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Cargando consignaciones...</p>
        </div>
    }
    else if (!consignments.Any())
    {
        <div class="empty-state">
            <span class="empty-icon">üì¶</span>
            <h3>No hay consignaciones registradas</h3>
            <p>Crea tu primera consignaci√≥n para empezar</p>
            <button class="btn btn-primary" @onclick="OpenCreateModal">
                Agregar Consignaci√≥n
            </button>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>N√∫mero</th>
                        <th>Cliente</th>
                        <th>Fecha</th>
                        <th>Estado</th>
                        <th>Items</th>
                        <th>Valor Total</th>
                        <th>Vendido</th>
                        <th>Por Bernard</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var consignment in consignments)
                    {
                        <tr>
                            <td><strong>@consignment.ConsignmentNumber</strong></td>
                            <td>@consignment.ClientName</td>
                            <td>@consignment.ConsignmentDate.ToString("dd/MM/yyyy")</td>
                            <td>
                                <span class="badge bg-@GetStatusColor(consignment.Status)">
                                    @consignment.StatusEmoji @consignment.StatusSpanish
                                </span>
                            </td>
                            <td>@consignment.Items.Count</td>
                            <td>@consignment.TotalValueAtRetail.ToString("C")</td>
                            <td>
                                <strong class="text-success">@consignment.TotalSold.ToString("C")</strong>
                            </td>
                            <td>
                                <strong class="text-primary">@consignment.AmountDueToBernard.ToString("C")</strong>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-info" @onclick="() => ViewDetails(consignment.Id)" title="Ver Detalle">
                                    üëÅÔ∏è
                                </button>
                                @if (consignment.Status == "Active" || consignment.Status == "PartiallySettled")
                                {
                                    <button class="btn btn-sm btn-success ms-1" @onclick="() => OpenSettleModal(consignment)" title="Liquidar">
                                        üí∞
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999">
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle-fill me-2"></i>
                <span id="successMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>

    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <span id="errorMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
        </div>
    </div>
</div>

<style>
    .consignments-page {
        padding: 2rem;
        max-width: 1600px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid var(--bs-primary);
    }

    .header-content h1 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }

    .subtitle {
        margin: 0.5rem 0 0;
        font-size: 1.1rem;
        opacity: 0.8;
    }

    .loading-container {
        text-align: center;
        padding: 4rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem;
        background: var(--bs-light);
        border-radius: 12px;
        margin: 2rem 0;
    }

    .empty-icon {
        font-size: 4rem;
        display: block;
        margin-bottom: 1rem;
    }

    .table {
        background: white;
        border-radius: 8px;
    }

    .table thead th {
        background-color: #f8f9fa;
        font-weight: 600;
        border-bottom: 2px solid #dee2e6;
    }
</style>

@code {
    private List<ConsignmentDto> consignments = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadConsignments();
    }

    private async Task LoadConsignments()
    {
        isLoading = true;
        var query = new GetConsignmentsQuery();
        consignments = await Mediator.Send(query);
        isLoading = false;
    }

    private void OpenCreateModal()
    {
        Navigation.NavigateTo("/consignments/create");
    }

    private void ViewDetails(int id)
    {
        Navigation.NavigateTo($"/consignments/{id}");
    }

    private async Task OpenSettleModal(ConsignmentDto consignment)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm",
            $"¬øConfirmar liquidaci√≥n de {consignment.ConsignmentNumber}?\n\nMonto para Bernard: {consignment.AmountDueToBernard:C}");

        if (confirmed)
        {
            try
            {
                var command = new SettleConsignmentCommand(consignment.Id);
                await Mediator.Send(command);
                await ShowToast("success", "Consignaci√≥n liquidada exitosamente");
                await LoadConsignments();
            }
            catch (Exception ex)
            {
                await ShowToast("error", $"Error al liquidar: {ex.Message}");
            }
        }
    }

    private async Task ShowToast(string type, string message)
    {
        var toastId = type == "success" ? "successToast" : "errorToast";
        var messageId = type == "success" ? "successMessage" : "errorMessage";

        await JS.InvokeVoidAsync("eval", $"document.getElementById('{messageId}').innerText = '{message}'");
        await JS.InvokeVoidAsync("eval", $"new bootstrap.Toast(document.getElementById('{toastId}')).show()");
    }

    private string GetStatusColor(string status) => status switch
    {
        "Active" => "primary",
        "PartiallySettled" => "warning",
        "Settled" => "success",
        "Expired" => "danger",
        "Returned" => "secondary",
        "Cancelled" => "dark",
        _ => "secondary"
    };
}
