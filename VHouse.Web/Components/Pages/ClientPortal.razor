@page "/client/{tenantCode}"
@using VHouse.Domain.Entities
@using VHouse.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using OrderItemEntity = VHouse.Domain.Entities.OrderItem
@using System.Text.Json
@using System.Text
@using VHouse.Domain.Interfaces
@inject VHouseDbContext DbContext
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject VHouse.Domain.Interfaces.IPasswordService PasswordService
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>@clientTenant?.BusinessName Portal - VHouse</PageTitle>

@if (!isAuthenticated)
{
    <div class="login-container">
        <div class="login-card">
            <div class="login-header">
                <h2>VHouse B2B Portal</h2>
                <p>Distribución Vegana Profesional</p>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            
            <div class="login-form">
                <div class="form-group">
                    <label>Usuario:</label>
                    <input type="text" @bind="username" class="form-control" placeholder="Usuario del cliente" />
                </div>
                <div class="form-group">
                    <label>Contraseña:</label>
                    <input type="password" @bind="password" class="form-control" placeholder="Contraseña" />
                </div>
                <button class="btn btn-primary w-100" @onclick="Login" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Verificando...</span>
                    }
                    else
                    {
                        <span>Ingresar al Portal</span>
                    }
                </button>
            </div>
        </div>
    </div>
}
else
{
    <!-- PORTAL PRINCIPAL -->
    <div class="client-portal-container">
        <!-- HEADER -->
        <header class="portal-header">
            <div class="header-brand">
                <h1>@clientTenant?.BusinessName</h1>
                <span class="portal-badge">Portal B2B Vegano</span>
            </div>
            <div class="header-actions">
                <button class="btn btn-outline" @onclick="Logout">Cerrar Sesión</button>
            </div>
        </header>

        <!-- DASHBOARD STATS -->
        <div class="dashboard-stats">
            <div class="stat-card">
                <div class="stat-value">@availableProducts.Count</div>
                <div class="stat-label">Productos Disponibles</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">@clientOrders.Count</div>
                <div class="stat-label">Pedidos Realizados</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">$@totalSpent.ToString("N2")</div>
                <div class="stat-label">Total Gastado</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">$@averageOrder.ToString("N2")</div>
                <div class="stat-label">Promedio por Pedido</div>
            </div>
        </div>

        <!-- CATALOGO DE PRODUCTOS -->
        <div class="products-section">
            <h2>Catálogo de Productos Veganos</h2>
            <div class="products-grid">
                @foreach (var cp in availableProducts)
                {
                    <div class="product-card">
                        <div class="product-emoji">@cp.Product.Emoji</div>
                        <h3>@cp.Product.ProductName</h3>
                        <p class="product-description">@cp.Product.Description</p>
                        <div class="product-details">
                            <div class="price">$@cp.CustomPrice.ToString("N2")</div>
                            <div class="stock">Stock: @cp.Product.StockQuantity</div>
                            <div class="min-order">Min: @cp.MinOrderQuantity unidades</div>
                        </div>
                        @if (cp.IsAvailable)
                        {
                            <button class="btn btn-primary" @onclick="() => AddToCart(cp)">
                                Agregar al Carrito
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" disabled>No Disponible</button>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- CARRITO -->
        @if (cart.Any())
        {
            <div class="cart-section">
                <h2>Carrito de Compras</h2>
                <div class="cart-items">
                    @foreach (var item in cart)
                    {
                        <div class="cart-item">
                            <div class="item-info">
                                <span class="item-emoji">@item.Product.Emoji</span>
                                <span class="item-name">@item.Product.ProductName</span>
                            </div>
                            <div class="item-controls">
                                <button @onclick="() => UpdateQuantity(item, -1)">-</button>
                                <span class="quantity">@item.Quantity</span>
                                <button @onclick="() => UpdateQuantity(item, 1)">+</button>
                                <span class="item-total">$@((item.Quantity * item.Price).ToString("N2"))</span>
                                <button class="btn-remove" @onclick="() => RemoveFromCart(item)">Eliminar</button>
                            </div>
                        </div>
                    }
                </div>
                <div class="cart-summary">
                    <h3>Total: $@cart.Sum(x => x.Quantity * x.Price).ToString("N2")</h3>
                    <button class="btn btn-success" @onclick="ProcessOrder">Procesar Pedido</button>
                </div>
            </div>
        }

        <!-- HISTORIAL DE PEDIDOS -->
        <div class="orders-section">
            <h2>Historial de Pedidos</h2>
            @if (!clientOrders.Any())
            {
                <p>No hay pedidos previos.</p>
            }
            else
            {
                <div class="orders-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Estado</th>
                                <th>Total</th>
                                <th>Items</th>
                                <th>Notas</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in clientOrders.OrderByDescending(o => o.OrderDate))
                            {
                                <tr>
                                    <td>@order.OrderDate.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td><span class="status-badge @GetStatusClass(order.Status)">@order.Status</span></td>
                                    <td>$@order.TotalAmount.ToString("N2")</td>
                                    <td>@order.OrderItems.Count items</td>
                                    <td>@order.Notes</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string TenantCode { get; set; } = "";
    
    // Authentication
    private bool isAuthenticated = false;
    private bool isLoading = false;
    private string username = "";
    private string password = "";
    private string errorMessage = "";
    
    // Client Data
    private ClientTenant? clientTenant;
    private List<ClientProduct> availableProducts = new();
    private List<Order> clientOrders = new();
    private decimal totalSpent = 0;
    private decimal averageOrder = 0;
    
    // Cart
    private List<CartItem> cart = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadClientTenant();
    }
    
    private async Task LoadClientTenant()
    {
        if (string.IsNullOrEmpty(TenantCode)) return;
        
        clientTenant = await DbContext.ClientTenants
            .FirstOrDefaultAsync(ct => ct.TenantCode == TenantCode);
            
        if (clientTenant == null)
        {
            Navigation.NavigateTo("/");
        }
    }
    
    private async Task Login()
    {
        isLoading = true;
        errorMessage = "";
        
        try
        {
            if (clientTenant != null && 
                clientTenant.LoginUsername == username && 
                PasswordService.VerifyPassword(password, clientTenant.LoginPasswordHash))
            {
                isAuthenticated = true;
                clientTenant.LastLoginAt = DateTime.UtcNow;
                await DbContext.SaveChangesAsync();
                
                await LoadClientData();
            }
            else
            {
                errorMessage = "Usuario o contraseña incorrectos";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al iniciar sesión. Intente nuevamente.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadClientData()
    {
        if (clientTenant == null) return;
        
        // Load available products
        availableProducts = await DbContext.Set<ClientProduct>()
            .Include(cp => cp.Product)
            .Where(cp => cp.ClientTenantId == clientTenant.Id && cp.IsAvailable)
            .ToListAsync();
            
        // Load order history
        clientOrders = await DbContext.Orders
            .Include(o => o.OrderItems)
            .ThenInclude(oi => oi.Product)
            .Where(o => o.ClientTenantId == clientTenant.Id)
            .ToListAsync();
            
        // Calculate stats
        totalSpent = clientOrders.Sum(o => o.TotalAmount);
        averageOrder = clientOrders.Any() ? totalSpent / clientOrders.Count : 0;
    }
    
    private void AddToCart(ClientProduct clientProduct)
    {
        var existingItem = cart.FirstOrDefault(c => c.ProductId == clientProduct.ProductId);
        
        if (existingItem != null)
        {
            existingItem.Quantity += clientProduct.MinOrderQuantity;
        }
        else
        {
            cart.Add(new CartItem
            {
                ProductId = clientProduct.ProductId,
                Product = clientProduct.Product,
                Quantity = clientProduct.MinOrderQuantity,
                Price = clientProduct.CustomPrice
            });
        }
        
        StateHasChanged();
    }
    
    private void UpdateQuantity(CartItem item, int change)
    {
        item.Quantity += change;
        if (item.Quantity <= 0)
        {
            RemoveFromCart(item);
        }
    }
    
    private void RemoveFromCart(CartItem item)
    {
        cart.Remove(item);
        StateHasChanged();
    }
    
    private async Task ProcessOrder()
    {
        if (!cart.Any() || clientTenant == null) return;
        
        try
        {
            var order = new Order
            {
                ClientTenantId = clientTenant.Id,
                CustomerId = 0, // Default customer for B2B
                OrderDate = DateTime.UtcNow,
                Status = VHouse.Domain.Enums.OrderStatus.Pending,
                TotalAmount = cart.Sum(x => x.Quantity * x.Price),
                Notes = $"Pedido B2B - {clientTenant.BusinessName}"
            };
            
            foreach (var item in cart)
            {
                order.OrderItems.Add(new OrderItemEntity
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    UnitPrice = item.Price
                });
            }
            
            DbContext.Orders.Add(order);
            await DbContext.SaveChangesAsync();
            
            cart.Clear();
            await LoadClientData();
            
            await JSRuntime.InvokeVoidAsync("alert", "Pedido procesado exitosamente");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing order: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al procesar el pedido");
        }
    }
    
    private void Logout()
    {
        isAuthenticated = false;
        username = "";
        password = "";
        cart.Clear();
    }
    
    private string GetStatusClass(VHouse.Domain.Enums.OrderStatus status)
    {
        return status switch
        {
            VHouse.Domain.Enums.OrderStatus.Completed => "status-success",
            VHouse.Domain.Enums.OrderStatus.InProgress => "status-warning",
            VHouse.Domain.Enums.OrderStatus.Cancelled => "status-danger",
            _ => "status-info"
        };
    }
    
    private class CartItem
    {
        public int ProductId { get; set; }
        public Product Product { get; set; } = null!;
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}