@page "/pos"
@rendermode @(new InteractiveServerRenderMode())
@using VHouse.Domain.Entities
@using VHouse.Domain.Enums
@using VHouse.Infrastructure.Data
@using VHouse.Application.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using VHouse.Web.Models
@inject VHouseDbContext Context
@inject IClientInventoryService ClientInventoryService
@inject IAuditService AuditService
@inject IBusinessMetricsService MetricsService
@inject IJSRuntime JSRuntime

<HeadContent>
    <title>üöÄ VHouse POS - Universal Point of Sale</title>
</HeadContent>

<!-- üåü MODERN FUTURISTIC POS INTERFACE -->
<div class="pos-page">
<div class="futuristic-pos">
    
    <!-- üéØ SMART HEADER CON CONTROLES UNIVERSALES -->
    <header class="pos-smart-header">
        <div class="pos-branding">
            <div class="brand-icon">üå±</div>
            <div class="brand-info">
                <h1>VHouse POS</h1>
                <span class="brand-subtitle">Universal Point of Sale</span>
            </div>
        </div>
        
        <!-- üéõÔ∏è CONTROL PANEL UNIVERSAL -->
        <div class="universal-controls">
            <!-- Cliente/Tenant Selector -->
            <div class="control-group @(showClientPanel ? "expanded" : "")">
                <button class="control-trigger" @onclick="ToggleClientPanel">
                    <span class="control-icon">üë•</span>
                    <span class="control-label">@GetSelectedClientName()</span>
                    <span class="expand-arrow @(showClientPanel ? "rotated" : "")">‚ñº</span>
                </button>
                @if (showClientPanel)
                {
                    <div class="control-panel client-panel">
                        <div class="panel-title">Seleccionar Cliente</div>
                        <div class="client-options">
                            <button class="client-option @(selectedClientId == 0 ? "active" : "")" @onclick="@(() => SelectClient(0, "Walk-in Customer"))">
                                <span class="client-icon">üö∂</span>
                                <span class="client-name">Walk-in Customer</span>
                            </button>
                            <button class="client-option @(selectedClientId == 1 ? "active" : "")" @onclick="@(() => SelectClient(1, "Mona la Dona"))">
                                <span class="client-icon">üç©</span>
                                <span class="client-name">Mona la Dona</span>
                            </button>
                            <button class="client-option @(selectedClientId == 2 ? "active" : "")" @onclick="@(() => SelectClient(2, "Sano Market"))">
                                <span class="client-icon">ü•¨</span>
                                <span class="client-name">Sano Market</span>
                            </button>
                            <button class="client-option @(selectedClientId == 3 ? "active" : "")" @onclick="@(() => SelectClient(3, "La Papeler√≠a"))">
                                <span class="client-icon">üìö</span>
                                <span class="client-name">La Papeler√≠a</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Tipo de Precio Selector -->
            <div class="control-group @(showPricePanel ? "expanded" : "")">
                <button class="control-trigger" @onclick="TogglePricePanel">
                    <span class="control-icon">üí∞</span>
                    <span class="control-label">@GetSelectedPriceType()</span>
                    <span class="expand-arrow @(showPricePanel ? "rotated" : "")">‚ñº</span>
                </button>
                @if (showPricePanel)
                {
                    <div class="control-panel price-panel">
                        <div class="panel-title">Tipo de Precio</div>
                        <div class="price-options">
                            <button class="price-option @(selectedPriceType == "public" ? "active" : "")" @onclick="@(() => SelectPriceType("public"))">
                                <span class="price-icon">üè∑Ô∏è</span>
                                <span class="price-name">Precio P√∫blico</span>
                                <span class="price-desc">Para clientes finales</span>
                            </button>
                            <button class="price-option @(selectedPriceType == "retail" ? "active" : "")" @onclick="@(() => SelectPriceType("retail"))">
                                <span class="price-icon">üè™</span>
                                <span class="price-name">Precio POS</span>
                                <span class="price-desc">Para revendedores</span>
                            </button>
                            <button class="price-option @(selectedPriceType == "cost" ? "active" : "")" @onclick="@(() => SelectPriceType("cost"))">
                                <span class="price-icon">üìä</span>
                                <span class="price-name">Precio Costo</span>
                                <span class="price-desc">Para an√°lisis</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Inventario/Filtros -->
            <div class="control-group @(showInventoryPanel ? "expanded" : "")">
                <button class="control-trigger" @onclick="ToggleInventoryPanel">
                    <span class="control-icon">üì¶</span>
                    <span class="control-label">@GetInventoryStatus()</span>
                    <span class="expand-arrow @(showInventoryPanel ? "rotated" : "")">‚ñº</span>
                </button>
                @if (showInventoryPanel)
                {
                    <div class="control-panel inventory-panel">
                        <div class="panel-title">Filtros de Inventario</div>
                        <div class="inventory-filters">
                            <button class="filter-btn @(showOnlyAvailable ? "active" : "")" @onclick="ToggleAvailableOnly">
                                <span class="filter-icon">‚úÖ</span>
                                Solo Disponibles
                            </button>
                            <button class="filter-btn @(showOnlyVegan ? "active" : "")" @onclick="ToggleVeganOnly">
                                <span class="filter-icon">üå±</span>
                                Solo Veganos
                            </button>
                            <input class="search-input" placeholder="üîç Buscar productos..." @bind="searchTerm" @bind:event="oninput" />
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <!-- üö® STATUS INDICATORS -->
        <div class="status-indicators">
            <div class="status-indicator order-count">
                <span class="indicator-value">@selectedProducts.Count</span>
                <span class="indicator-label">Items</span>
            </div>
            <div class="status-indicator order-total">
                <span class="indicator-value">@GetTotal().ToString("C0")</span>
                <span class="indicator-label">Total</span>
            </div>
            <button class="status-indicator ai-chat-trigger @(showChatbot ? "active" : "")" @onclick="ToggleChatbot">
                <span class="indicator-icon">ü§ñ</span>
                <span class="indicator-label">AI Chat</span>
            </button>
        </div>
    </header>

    <!-- üéÆ MAIN POS INTERFACE -->
    <main class="pos-main">
        
        <!-- üì± PRODUCTS PANEL - MINIMALISTA Y EFICIENTE -->
        <section class="products-panel">
            <div class="products-grid">
                @foreach (var product in GetFilteredProducts())
                {
                    <div class="product-tile @(selectedProducts.ContainsKey(product.Id) ? "selected" : "")" 
                         @onclick="@(() => ToggleProduct(product))">
                        
                        <!-- Product Info -->
                        <div class="product-display">
                            <div class="product-emoji">@product.Emoji</div>
                            <div class="product-name">@product.ProductName</div>
                            <div class="product-price">@GetProductPrice(product).ToString("C")</div>
                        </div>
                        
                        <!-- Quick Quantity Controls -->
                        @if (selectedProducts.ContainsKey(product.Id))
                        {
                            <div class="quantity-overlay">
                                <button class="qty-btn minus" @onclick:stopPropagation="true" @onclick="@(() => DecrementQuantity(product.Id))">‚àí</button>
                                <span class="qty-display">@selectedProducts[product.Id]</span>
                                <button class="qty-btn plus" @onclick:stopPropagation="true" @onclick="@(() => IncrementQuantity(product.Id))">+</button>
                            </div>
                        }
                        
                        <!-- Stock Indicator -->
                        <div class="stock-indicator @(product.StockQuantity <= 5 ? "low-stock" : "")">
                            @product.StockQuantity
                        </div>
                    </div>
                }
            </div>
        </section>
        
        <!-- üìã SMART ORDER PANEL -->
        <aside class="order-panel @(selectedProducts.Any() ? "has-items" : "empty")">
            
            @if (selectedProducts.Any())
            {
                <!-- Order Items -->
                <div class="order-items">
                    @foreach (var item in selectedProducts)
                    {
                        var product = products.First(p => p.Id == item.Key);
                        var unitPrice = GetProductPrice(product);
                        var totalPrice = unitPrice * item.Value;
                        
                        <div class="order-item">
                            <div class="item-visual">
                                <span class="item-emoji">@product.Emoji</span>
                                <span class="item-qty">@item.Value</span>
                            </div>
                            <div class="item-details">
                                <div class="item-name">@product.ProductName</div>
                                <div class="item-calculation">@item.Value √ó @unitPrice.ToString("C") = @totalPrice.ToString("C")</div>
                            </div>
                            <button class="remove-item" @onclick="@(() => RemoveFromOrder(item.Key))">√ó</button>
                        </div>
                    }
                </div>
                
                <!-- Smart Totals -->
                <div class="order-totals">
                    <div class="total-line">
                        <span>Subtotal</span>
                        <span>@GetSubtotal().ToString("C")</span>
                    </div>
                    <div class="total-line">
                        <span>IVA (16%)</span>
                        <span>@GetTax().ToString("C")</span>
                    </div>
                    <div class="total-line grand-total">
                        <span>TOTAL</span>
                        <span>@GetTotal().ToString("C")</span>
                    </div>
                </div>
                
                <!-- Smart Actions -->
                <div class="order-actions">
                    <button class="action-btn secondary" @onclick="ClearOrder" disabled="@isProcessingOrder">
                        <span class="btn-icon">üóëÔ∏è</span>
                        <span class="btn-text">Limpiar</span>
                    </button>
                    <button class="action-btn primary" @onclick="ProcessOrder" disabled="@isProcessingOrder">
                        @if (isProcessingOrder)
                        {
                            <span class="btn-icon">‚è≥</span>
                            <span class="btn-text">Procesando...</span>
                        }
                        else
                        {
                            <span class="btn-icon">‚ö°</span>
                            <span class="btn-text">Procesar Orden</span>
                        }
                    </button>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="empty-order-state">
                    <div class="empty-animation">üõí</div>
                    <h3>Orden Vac√≠a</h3>
                    <p>Toca productos para agregar al carrito</p>
                    <div class="empty-tips">
                        <div class="tip">üí° Usa los controles superiores para cambiar cliente y precios</div>
                    </div>
                </div>
            }
            
        </aside>
    </main>
    
    <!-- ü§ñ CHATBOT UNIVERSAL -->
    <VHouse.Web.Components.Shared.UniversalChatbot 
        IsVisible="@showChatbot"
        Title="@chatConfig.Title"
        Subtitle="@chatConfig.Subtitle"
        HeaderIcon="@chatConfig.HeaderIcon"
        WelcomeMessage="@chatConfig.WelcomeMessage"
        PlaceholderText="@chatConfig.PlaceholderText"
        QuickSuggestions="@chatConfig.QuickSuggestions"
        ContextBuilder="@BuildPOSContext"
        ConversationType="@chatConfig.ConversationType"
        CustomerId="@chatConfig.CustomerId"
        OnClose="@CloseChatbot"
        OnMessageSent="@HandleMessageSent"
        OnResponseReceived="@HandleResponseReceived" />
    
    <!-- üéâ SUCCESS MESSAGE OVERLAY -->
    @if (showSuccessMessage)
    {
        <div class="success-overlay">
            <div class="success-message">
                <div class="success-icon">‚úÖ</div>
                <div class="success-text">@successMessage</div>
            </div>
        </div>
    }
    
</div>
</div>

@code {
    private List<Product> products = new();
    private Dictionary<int, int> selectedProducts = new();
    
    // UI State
    private bool showClientPanel = false;
    private bool showPricePanel = false;
    private bool showInventoryPanel = false;
    private bool showOnlyAvailable = true;
    private bool showOnlyVegan = false;
    private string searchTerm = "";
    private bool isProcessingOrder = false;
    private bool showSuccessMessage = false;
    private string successMessage = "";
    
    // Business Logic State
    private int selectedClientId = 0;
    private string selectedClientName = "Walk-in Customer";
    private string selectedPriceType = "retail";
    
    // Universal Chatbot State
    private bool showChatbot = false;
    private ChatbotConfiguration chatConfig = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register this component for chatbot callbacks after first render
            await JSRuntime.InvokeVoidAsync("registerPOSComponent", DotNetObjectReference.Create(this));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadProducts()
    {
        await LoadProductsForClient();
    }
    
    private async Task LoadProductsForClient()
    {
        if (selectedClientId == 0)
        {
            // Walk-in customer: load all active products with stock
            products = await Context.Products
                .Where(p => p.IsActive && p.StockQuantity > 0)
                .OrderBy(p => p.ProductName)
                .ToListAsync();
        }
        else
        {
            // Specific client: load only assigned products
            products = await ClientInventoryService.GetAvailableProductsForClientAsync(selectedClientId);
        }
        
        StateHasChanged();
    }

    // ============= UI CONTROL METHODS =============
    
    private void ToggleClientPanel() => showClientPanel = !showClientPanel;
    private void TogglePricePanel() => showPricePanel = !showPricePanel;
    private void ToggleInventoryPanel() => showInventoryPanel = !showInventoryPanel;
    
    private async Task SelectClient(int clientId, string clientName)
    {
        selectedClientId = clientId;
        selectedClientName = clientName;
        showClientPanel = false;
        
        // Reload products for the selected client
        await LoadProductsForClient();
        
        StateHasChanged();
    }
    
    private void SelectPriceType(string priceType)
    {
        selectedPriceType = priceType;
        showPricePanel = false;
        StateHasChanged();
    }
    
    private void ToggleAvailableOnly()
    {
        showOnlyAvailable = !showOnlyAvailable;
        StateHasChanged();
    }
    
    private void ToggleVeganOnly()
    {
        showOnlyVegan = !showOnlyVegan;
        StateHasChanged();
    }

    // ============= BUSINESS LOGIC METHODS =============
    
    private List<Product> GetFilteredProducts()
    {
        var filtered = products.AsQueryable();
        
        if (showOnlyAvailable)
            filtered = filtered.Where(p => p.StockQuantity > 0);
            
        if (showOnlyVegan)
            filtered = filtered.Where(p => p.IsVegan);
            
        if (!string.IsNullOrWhiteSpace(searchTerm))
            filtered = filtered.Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            
        return filtered.ToList();
    }
    
    private decimal GetProductPrice(Product product)
    {
        return selectedPriceType switch
        {
            "public" => product.PricePublic,
            "cost" => product.PriceCost,
            _ => product.PriceRetail
        };
    }
    
    private void ToggleProduct(Product product)
    {
        if (selectedProducts.ContainsKey(product.Id))
        {
            IncrementQuantity(product.Id);
        }
        else
        {
            selectedProducts[product.Id] = 1;
        }
        StateHasChanged();
    }
    
    private void IncrementQuantity(int productId)
    {
        if (selectedProducts.ContainsKey(productId))
            selectedProducts[productId]++;
        StateHasChanged();
    }
    
    private void DecrementQuantity(int productId)
    {
        if (selectedProducts.ContainsKey(productId))
        {
            selectedProducts[productId]--;
            if (selectedProducts[productId] <= 0)
                selectedProducts.Remove(productId);
        }
        StateHasChanged();
    }
    
    private void RemoveFromOrder(int productId)
    {
        selectedProducts.Remove(productId);
        StateHasChanged();
    }
    
    private void ClearOrder()
    {
        selectedProducts.Clear();
        StateHasChanged();
    }
    
    // ============= CALCULATION METHODS =============
    
    private decimal GetSubtotal()
    {
        return selectedProducts.Sum(item => {
            var product = products.First(p => p.Id == item.Key);
            return GetProductPrice(product) * item.Value;
        });
    }
    
    private decimal GetTax() => GetSubtotal() * 0.16m;
    private decimal GetTotal() => GetSubtotal() + GetTax();
    
    // ============= DISPLAY METHODS =============
    
    private string GetSelectedClientName() => selectedClientName;
    private string GetSelectedPriceType() => selectedPriceType.ToUpper();
    private string GetInventoryStatus() => $"{GetFilteredProducts().Count} Products";
    
    // ============= ACTIONS =============
    
    private async Task ProcessOrder()
    {
        if (!selectedProducts.Any()) return;

        var startTime = DateTime.UtcNow;
        isProcessingOrder = true;
        StateHasChanged();

        try
        {
            // ENTERPRISE AUDIT: Log order initiation
            await AuditService.LogBusinessEventAsync("ORDER_STARTED", "Order", null, "SYSTEM", "POS System", 
                GetTotal(), selectedClientName);

            // Create a new order
            var customerId = await GetOrCreateWalkInCustomerIdAsync();
            var order = new Order
            {
                CustomerId = customerId,
                ClientTenantId = selectedClientId > 0 ? selectedClientId : null,
                TotalAmount = GetTotal(),
                Status = OrderStatus.Completed,
                OrderDate = DateTime.Now,
                CompletedAt = DateTime.Now,
                Notes = $"POS Order - {selectedClientName} - {selectedPriceType.ToUpper()} pricing"
            };

            // Add order items and track inventory changes
            var orderItems = new List<VHouse.Domain.Entities.OrderItem>();
            var inventoryChanges = new List<object>();
            
            foreach (var item in selectedProducts)
            {
                var product = products.First(p => p.Id == item.Key);
                var unitPrice = GetProductPrice(product);
                var oldStock = product.StockQuantity;
                
                var orderItem = new VHouse.Domain.Entities.OrderItem
                {
                    ProductId = product.Id,
                    Quantity = item.Value,
                    UnitPrice = unitPrice
                };
                
                orderItems.Add(orderItem);
                
                // Update product stock with audit trail
                product.StockQuantity -= item.Value;
                if (product.StockQuantity < 0) product.StockQuantity = 0;
                
                inventoryChanges.Add(new {
                    ProductId = product.Id,
                    ProductName = product.ProductName,
                    OldStock = oldStock,
                    NewStock = product.StockQuantity,
                    Quantity = item.Value,
                    UnitPrice = unitPrice
                });
                
                // ENTERPRISE METRICS: Record inventory change
                await MetricsService.RecordInventoryMetricAsync(product.ProductName, product.StockQuantity, 
                    "STOCK_LEVEL", selectedClientName);
            }

            // Add order items to the order
            foreach (var orderItem in orderItems)
            {
                order.OrderItems.Add(orderItem);
            }

            // Save to database
            Context.Orders.Add(order);
            
            // Update product stock in database
            foreach (var item in selectedProducts)
            {
                var productToUpdate = await Context.Products.FindAsync(item.Key);
                if (productToUpdate != null)
                {
                    productToUpdate.StockQuantity -= item.Value;
                    if (productToUpdate.StockQuantity < 0) productToUpdate.StockQuantity = 0;
                    Context.Products.Update(productToUpdate);
                }
            }
            
            await Context.SaveChangesAsync();
            
            // ENTERPRISE AUDIT: Log successful order completion
            var executionTime = DateTime.UtcNow - startTime;
            await AuditService.LogBusinessEventAsync("ORDER_COMPLETED", "Order", order.Id, "SYSTEM", "POS System", 
                order.TotalAmount, selectedClientName);
                
            // ENTERPRISE METRICS: Record business metrics
            await MetricsService.RecordSalesMetricAsync(order.TotalAmount, selectedClientName, orderItems.Sum(oi => oi.Quantity));
            await MetricsService.RecordPerformanceAsync("ProcessOrder", executionTime, "POS_SYSTEM");
            
            // Check for business alerts
            await MetricsService.CheckInventoryLevelsAsync();
            
            // Clear the order after successful processing
            ClearOrder();
            
            // Reload products to reflect stock changes
            await LoadProducts();
            
            // Show success message
            successMessage = $"¬°Orden procesada exitosamente! #{order.Id} - {order.TotalAmount:C}";
            showSuccessMessage = true;
            
            // Hide success message after 3 seconds
            _ = Task.Delay(3000).ContinueWith(t => {
                showSuccessMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            // ENTERPRISE AUDIT: Log order failure
            var executionTime = DateTime.UtcNow - startTime;
            await AuditService.LogActionAsync("ORDER_FAILED", "Order", null, "SYSTEM", "POS System", 
                selectedProducts, null, $"Order processing failed: {ex.Message}", "ERROR", "POS", 
                GetTotal(), selectedClientName, false, ex.Message, executionTime);
            
            // Handle error
            successMessage = $"Error procesando orden: {ex.Message}";
            showSuccessMessage = true;
            
            // Hide error message after 5 seconds
            _ = Task.Delay(5000).ContinueWith(t => {
                showSuccessMessage = false;
                InvokeAsync(StateHasChanged);
            });
        }
        finally
        {
            isProcessingOrder = false;
            StateHasChanged();
        }
    }

    private async Task<int> GetOrCreateWalkInCustomerIdAsync()
    {
        // Check if Walk-in Customer already exists
        var walkInCustomer = await Context.Customers
            .FirstOrDefaultAsync(c => c.CustomerName == "Walk-in Customer");
            
        if (walkInCustomer != null)
        {
            return walkInCustomer.Id;
        }
        
        // Create Walk-in Customer if it doesn't exist
        var newWalkInCustomer = new Customer
        {
            CustomerName = "Walk-in Customer",
            Email = "walkin@vhouse.local",
            Phone = "000-000-0000",
            Address = "Walk-in",
            IsVeganPreferred = true,
            IsActive = true
        };
        
        Context.Customers.Add(newWalkInCustomer);
        await Context.SaveChangesAsync();
        
        return newWalkInCustomer.Id;
    }

    // ============= UNIVERSAL CHATBOT METHODS =============
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        UpdateChatbotConfig();
    }
    
    private void UpdateChatbotConfig()
    {
        chatConfig = ChatbotConfigurations.ForPOS(
            products.Cast<object>().ToList(),
            selectedProducts,
            selectedClientName
        );
        chatConfig.CustomerId = selectedClientId > 0 ? selectedClientId : null;
    }
    
    private void ToggleChatbot()
    {
        if (!showChatbot)
        {
            UpdateChatbotConfig(); // Refresh config when opening
        }
        showChatbot = !showChatbot;
        StateHasChanged();
    }
    
    private async Task CloseChatbot()
    {
        showChatbot = false;
        StateHasChanged();
    }
    
    private async Task HandleMessageSent(string message)
    {
        // Optional: Handle message sent event
        await Task.CompletedTask;
    }
    
    private async Task HandleResponseReceived(BusinessConversationResponseDto response)
    {
        // Optional: Handle specific response actions, like adding products
        await Task.CompletedTask;
    }
    
    [JSInvokable]
    public async Task AddProductFromChatbot(int productId, string productName)
    {
        // Use the real client inventory system
        bool isAvailable = await ClientInventoryService.IsProductAvailableForClientAsync(selectedClientId, productId, 1);
        
        if (isAvailable)
        {
            var product = products.FirstOrDefault(p => p.Id == productId);
            if (product != null)
            {
                if (selectedProducts.ContainsKey(productId))
                {
                    selectedProducts[productId]++;
                }
                else
                {
                    selectedProducts[productId] = 1;
                }
                
                // Show visual confirmation
                await JSRuntime.InvokeVoidAsync("showToast", $"‚úÖ {product.ProductName} agregado al carrito para {selectedClientName}");
                
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", $"‚ùå Producto {productName} no encontrado", "error");
            }
        }
        else
        {
            string reason = selectedClientId == 0 ? "sin stock" : "no asignado a este cliente o sin stock";
            await JSRuntime.InvokeVoidAsync("showToast", $"‚ùå {productName} no disponible ({reason})", "error");
        }
    }
    
    private string BuildPOSContext()
    {
        var context = $"Cliente actual: {selectedClientName}\n";
        context += $"Tipo de precio: {selectedPriceType}\n";
        context += $"Productos en carrito: {selectedProducts.Count}\n";
        
        if (selectedProducts.Any())
        {
            context += "Productos seleccionados:\n";
            foreach (var item in selectedProducts.Take(5))
            {
                var product = products.FirstOrDefault(p => p.Id == item.Key);
                if (product != null)
                {
                    context += $"- {product.ProductName} (Cantidad: {item.Value})\n";
                }
            }
        }
        
        context += $"Total actual: {GetTotal():C}\n\n";
        
        // CAT√ÅLOGO REAL DE PRODUCTOS DISPONIBLES
        context += "PRODUCTOS REALES DISPONIBLES EN VHouse:\n";
        foreach (var product in products.Where(p => p.IsActive && p.StockQuantity > 0))
        {
            var price = GetProductPrice(product);
            context += $"- {product.ProductName} {product.Emoji} - Stock: {product.StockQuantity} - Precio: {price:C}\n";
        }
        
        context += "\nIMPORTANTE: SOLO recomienda productos que est√©n en la lista anterior. NO inventes productos que no existen.\n";
        context += "Si el cliente pide productos que no tenemos, sugiere alternativas similares de nuestro cat√°logo real.\n";
        
        return context;
    }
}