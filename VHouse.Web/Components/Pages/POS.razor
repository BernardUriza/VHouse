@page "/pos"
@rendermode @(new InteractiveServerRenderMode())
@using VHouse.Domain.Entities
@using VHouse.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@inject VHouseDbContext Context

<PageTitle>üöÄ VHouse POS - Universal Point of Sale</PageTitle>

<!-- üåü MODERN FUTURISTIC POS INTERFACE -->
<div class="futuristic-pos">
    
    <!-- üéØ SMART HEADER CON CONTROLES UNIVERSALES -->
    <header class="pos-smart-header">
        <div class="pos-branding">
            <div class="brand-icon">üå±</div>
            <div class="brand-info">
                <h1>VHouse POS</h1>
                <span class="brand-subtitle">Universal Point of Sale</span>
            </div>
        </div>
        
        <!-- üéõÔ∏è CONTROL PANEL UNIVERSAL -->
        <div class="universal-controls">
            <!-- Cliente/Tenant Selector -->
            <div class="control-group @(showClientPanel ? "expanded" : "")">
                <button class="control-trigger" @onclick="ToggleClientPanel">
                    <span class="control-icon">üë•</span>
                    <span class="control-label">@GetSelectedClientName()</span>
                    <span class="expand-arrow @(showClientPanel ? "rotated" : "")">‚ñº</span>
                </button>
                @if (showClientPanel)
                {
                    <div class="control-panel client-panel">
                        <div class="panel-title">Seleccionar Cliente</div>
                        <div class="client-options">
                            <button class="client-option @(selectedClientId == 0 ? "active" : "")" @onclick="@(() => SelectClient(0, "Walk-in Customer"))">
                                <span class="client-icon">üö∂</span>
                                <span class="client-name">Walk-in Customer</span>
                            </button>
                            <button class="client-option @(selectedClientId == 1 ? "active" : "")" @onclick="@(() => SelectClient(1, "Mona la Dona"))">
                                <span class="client-icon">üç©</span>
                                <span class="client-name">Mona la Dona</span>
                            </button>
                            <button class="client-option @(selectedClientId == 2 ? "active" : "")" @onclick="@(() => SelectClient(2, "Sano Market"))">
                                <span class="client-icon">ü•¨</span>
                                <span class="client-name">Sano Market</span>
                            </button>
                            <button class="client-option @(selectedClientId == 3 ? "active" : "")" @onclick="@(() => SelectClient(3, "La Papeler√≠a"))">
                                <span class="client-icon">üìö</span>
                                <span class="client-name">La Papeler√≠a</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Tipo de Precio Selector -->
            <div class="control-group @(showPricePanel ? "expanded" : "")">
                <button class="control-trigger" @onclick="TogglePricePanel">
                    <span class="control-icon">üí∞</span>
                    <span class="control-label">@GetSelectedPriceType()</span>
                    <span class="expand-arrow @(showPricePanel ? "rotated" : "")">‚ñº</span>
                </button>
                @if (showPricePanel)
                {
                    <div class="control-panel price-panel">
                        <div class="panel-title">Tipo de Precio</div>
                        <div class="price-options">
                            <button class="price-option @(selectedPriceType == "public" ? "active" : "")" @onclick="@(() => SelectPriceType("public"))">
                                <span class="price-icon">üè∑Ô∏è</span>
                                <span class="price-name">Precio P√∫blico</span>
                                <span class="price-desc">Para clientes finales</span>
                            </button>
                            <button class="price-option @(selectedPriceType == "retail" ? "active" : "")" @onclick="@(() => SelectPriceType("retail"))">
                                <span class="price-icon">üè™</span>
                                <span class="price-name">Precio POS</span>
                                <span class="price-desc">Para revendedores</span>
                            </button>
                            <button class="price-option @(selectedPriceType == "cost" ? "active" : "")" @onclick="@(() => SelectPriceType("cost"))">
                                <span class="price-icon">üìä</span>
                                <span class="price-name">Precio Costo</span>
                                <span class="price-desc">Para an√°lisis</span>
                            </button>
                        </div>
                    </div>
                }
            </div>
            
            <!-- Inventario/Filtros -->
            <div class="control-group @(showInventoryPanel ? "expanded" : "")">
                <button class="control-trigger" @onclick="ToggleInventoryPanel">
                    <span class="control-icon">üì¶</span>
                    <span class="control-label">@GetInventoryStatus()</span>
                    <span class="expand-arrow @(showInventoryPanel ? "rotated" : "")">‚ñº</span>
                </button>
                @if (showInventoryPanel)
                {
                    <div class="control-panel inventory-panel">
                        <div class="panel-title">Filtros de Inventario</div>
                        <div class="inventory-filters">
                            <button class="filter-btn @(showOnlyAvailable ? "active" : "")" @onclick="ToggleAvailableOnly">
                                <span class="filter-icon">‚úÖ</span>
                                Solo Disponibles
                            </button>
                            <button class="filter-btn @(showOnlyVegan ? "active" : "")" @onclick="ToggleVeganOnly">
                                <span class="filter-icon">üå±</span>
                                Solo Veganos
                            </button>
                            <input class="search-input" placeholder="üîç Buscar productos..." @bind="searchTerm" @bind:event="oninput" />
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <!-- üö® STATUS INDICATORS -->
        <div class="status-indicators">
            <div class="status-indicator order-count">
                <span class="indicator-value">@selectedProducts.Count</span>
                <span class="indicator-label">Items</span>
            </div>
            <div class="status-indicator order-total">
                <span class="indicator-value">@GetTotal().ToString("C0")</span>
                <span class="indicator-label">Total</span>
            </div>
        </div>
    </header>

    <!-- üéÆ MAIN POS INTERFACE -->
    <main class="pos-main">
        
        <!-- üì± PRODUCTS PANEL - MINIMALISTA Y EFICIENTE -->
        <section class="products-panel">
            <div class="products-grid">
                @foreach (var product in GetFilteredProducts())
                {
                    <div class="product-tile @(selectedProducts.ContainsKey(product.Id) ? "selected" : "")" 
                         @onclick="@(() => ToggleProduct(product))">
                        
                        <!-- Product Info -->
                        <div class="product-display">
                            <div class="product-emoji">@product.Emoji</div>
                            <div class="product-name">@product.ProductName</div>
                            <div class="product-price">@GetProductPrice(product).ToString("C")</div>
                        </div>
                        
                        <!-- Quick Quantity Controls -->
                        @if (selectedProducts.ContainsKey(product.Id))
                        {
                            <div class="quantity-overlay">
                                <button class="qty-btn minus" @onclick:stopPropagation="true" @onclick="@(() => DecrementQuantity(product.Id))">‚àí</button>
                                <span class="qty-display">@selectedProducts[product.Id]</span>
                                <button class="qty-btn plus" @onclick:stopPropagation="true" @onclick="@(() => IncrementQuantity(product.Id))">+</button>
                            </div>
                        }
                        
                        <!-- Stock Indicator -->
                        <div class="stock-indicator @(product.StockQuantity <= 5 ? "low-stock" : "")">
                            @product.StockQuantity
                        </div>
                    </div>
                }
            </div>
        </section>
        
        <!-- üìã SMART ORDER PANEL -->
        <aside class="order-panel @(selectedProducts.Any() ? "has-items" : "empty")">
            
            @if (selectedProducts.Any())
            {
                <!-- Order Items -->
                <div class="order-items">
                    @foreach (var item in selectedProducts)
                    {
                        var product = products.First(p => p.Id == item.Key);
                        var unitPrice = GetProductPrice(product);
                        var totalPrice = unitPrice * item.Value;
                        
                        <div class="order-item">
                            <div class="item-visual">
                                <span class="item-emoji">@product.Emoji</span>
                                <span class="item-qty">@item.Value</span>
                            </div>
                            <div class="item-details">
                                <div class="item-name">@product.ProductName</div>
                                <div class="item-calculation">@item.Value √ó @unitPrice.ToString("C") = @totalPrice.ToString("C")</div>
                            </div>
                            <button class="remove-item" @onclick="@(() => RemoveFromOrder(item.Key))">√ó</button>
                        </div>
                    }
                </div>
                
                <!-- Smart Totals -->
                <div class="order-totals">
                    <div class="total-line">
                        <span>Subtotal</span>
                        <span>@GetSubtotal().ToString("C")</span>
                    </div>
                    <div class="total-line">
                        <span>IVA (16%)</span>
                        <span>@GetTax().ToString("C")</span>
                    </div>
                    <div class="total-line grand-total">
                        <span>TOTAL</span>
                        <span>@GetTotal().ToString("C")</span>
                    </div>
                </div>
                
                <!-- Smart Actions -->
                <div class="order-actions">
                    <button class="action-btn secondary" @onclick="ClearOrder">
                        <span class="btn-icon">üóëÔ∏è</span>
                        <span class="btn-text">Limpiar</span>
                    </button>
                    <button class="action-btn primary" @onclick="ProcessOrder">
                        <span class="btn-icon">‚ö°</span>
                        <span class="btn-text">Procesar Orden</span>
                    </button>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="empty-order-state">
                    <div class="empty-animation">üõí</div>
                    <h3>Orden Vac√≠a</h3>
                    <p>Toca productos para agregar al carrito</p>
                    <div class="empty-tips">
                        <div class="tip">üí° Usa los controles superiores para cambiar cliente y precios</div>
                    </div>
                </div>
            }
            
        </aside>
    </main>
    
</div>

@code {
    private List<Product> products = new();
    private Dictionary<int, int> selectedProducts = new();
    
    // UI State
    private bool showClientPanel = false;
    private bool showPricePanel = false;
    private bool showInventoryPanel = false;
    private bool showOnlyAvailable = true;
    private bool showOnlyVegan = false;
    private string searchTerm = "";
    
    // Business Logic State
    private int selectedClientId = 0;
    private string selectedClientName = "Walk-in Customer";
    private string selectedPriceType = "retail";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await Context.Products
            .Where(p => p.IsActive)
            .OrderBy(p => p.ProductName)
            .ToListAsync();
        StateHasChanged();
    }

    // ============= UI CONTROL METHODS =============
    
    private void ToggleClientPanel() => showClientPanel = !showClientPanel;
    private void TogglePricePanel() => showPricePanel = !showPricePanel;
    private void ToggleInventoryPanel() => showInventoryPanel = !showInventoryPanel;
    
    private void SelectClient(int clientId, string clientName)
    {
        selectedClientId = clientId;
        selectedClientName = clientName;
        showClientPanel = false;
        StateHasChanged();
    }
    
    private void SelectPriceType(string priceType)
    {
        selectedPriceType = priceType;
        showPricePanel = false;
        StateHasChanged();
    }
    
    private void ToggleAvailableOnly()
    {
        showOnlyAvailable = !showOnlyAvailable;
        StateHasChanged();
    }
    
    private void ToggleVeganOnly()
    {
        showOnlyVegan = !showOnlyVegan;
        StateHasChanged();
    }

    // ============= BUSINESS LOGIC METHODS =============
    
    private List<Product> GetFilteredProducts()
    {
        var filtered = products.AsQueryable();
        
        if (showOnlyAvailable)
            filtered = filtered.Where(p => p.StockQuantity > 0);
            
        if (showOnlyVegan)
            filtered = filtered.Where(p => p.IsVegan);
            
        if (!string.IsNullOrWhiteSpace(searchTerm))
            filtered = filtered.Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            
        return filtered.ToList();
    }
    
    private decimal GetProductPrice(Product product)
    {
        return selectedPriceType switch
        {
            "public" => product.PricePublic,
            "cost" => product.PriceCost,
            _ => product.PriceRetail
        };
    }
    
    private void ToggleProduct(Product product)
    {
        if (selectedProducts.ContainsKey(product.Id))
        {
            IncrementQuantity(product.Id);
        }
        else
        {
            selectedProducts[product.Id] = 1;
        }
        StateHasChanged();
    }
    
    private void IncrementQuantity(int productId)
    {
        if (selectedProducts.ContainsKey(productId))
            selectedProducts[productId]++;
        StateHasChanged();
    }
    
    private void DecrementQuantity(int productId)
    {
        if (selectedProducts.ContainsKey(productId))
        {
            selectedProducts[productId]--;
            if (selectedProducts[productId] <= 0)
                selectedProducts.Remove(productId);
        }
        StateHasChanged();
    }
    
    private void RemoveFromOrder(int productId)
    {
        selectedProducts.Remove(productId);
        StateHasChanged();
    }
    
    private void ClearOrder()
    {
        selectedProducts.Clear();
        StateHasChanged();
    }
    
    // ============= CALCULATION METHODS =============
    
    private decimal GetSubtotal()
    {
        return selectedProducts.Sum(item => {
            var product = products.First(p => p.Id == item.Key);
            return GetProductPrice(product) * item.Value;
        });
    }
    
    private decimal GetTax() => GetSubtotal() * 0.16m;
    private decimal GetTotal() => GetSubtotal() + GetTax();
    
    // ============= DISPLAY METHODS =============
    
    private string GetSelectedClientName() => selectedClientName;
    private string GetSelectedPriceType() => selectedPriceType.ToUpper();
    private string GetInventoryStatus() => $"{GetFilteredProducts().Count} Products";
    
    // ============= ACTIONS =============
    
    private void ProcessOrder()
    {
        // TODO: Implement order processing logic
        // This would create an Order entity and save to database
        
        // For now, just clear the order
        ClearOrder();
    }
}