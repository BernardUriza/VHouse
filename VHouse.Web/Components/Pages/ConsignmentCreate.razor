@page "/consignments/create"
@rendermode @(new InteractiveServerRenderMode())
@using MediatR
@using VHouse.Application.Commands
@using VHouse.Application.Queries
@using VHouse.Application.DTOs
@inject IMediator Mediator
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Nueva Consignaci√≥n - VHouse</PageTitle>

<div class="create-consignment-page">
    <div class="page-header">
        <h2>‚ûï Nueva Consignaci√≥n</h2>
        <button class="btn btn-secondary" @onclick="GoBack">‚Üê Volver</button>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status"></div>
            <p>Cargando datos...</p>
        </div>
    }
    else
    {
        <div class="form-container">
            <!-- Cliente y Configuraci√≥n -->
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">üè™ Cliente y Configuraci√≥n</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Cliente *</label>
                                <select class="form-select" @bind="selectedClientId">
                                    <option value="0">Seleccionar cliente...</option>
                                    @foreach (var client in clients)
                                    {
                                        <option value="@client.Id">@client.TenantName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label">% Tienda *</label>
                                <input type="number" class="form-control" @bind="storePercentage" min="0" max="100" step="0.01" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label">% Bernard *</label>
                                <input type="number" class="form-control" @bind="bernardPercentage" min="0" max="100" step="0.01" />
                            </div>
                        </div>
                    </div>

                    @if (Math.Abs(storePercentage + bernardPercentage - 100) > 0.01m)
                    {
                        <div class="alert alert-warning">
                            ‚ö†Ô∏è Los porcentajes deben sumar 100%. Actual: @((storePercentage + bernardPercentage))%
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Fecha de Expiraci√≥n (opcional)</label>
                                <input type="date" class="form-control" @bind="expiryDate" />
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">T√©rminos *</label>
                        <textarea class="form-control" rows="2" @bind="terms" placeholder="Ej: Liquidaci√≥n al finalizar el mes"></textarea>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Notas (opcional)</label>
                        <textarea class="form-control" rows="2" @bind="notes" placeholder="Notas adicionales"></textarea>
                    </div>
                </div>
            </div>

            <!-- Productos -->
            <div class="card mb-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">üì¶ Productos a Consignar</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Agregar Producto</label>
                        <div class="input-group">
                            <select class="form-select" @bind="selectedProductId">
                                <option value="0">Seleccionar producto...</option>
                                @foreach (var product in products)
                                {
                                    <option value="@product.Id">@product.Emoji @product.ProductName - @product.Price.ToString("C")</option>
                                }
                            </select>
                            <button class="btn btn-primary" @onclick="AddProduct" disabled="@(selectedProductId == 0)">
                                ‚ûï Agregar
                            </button>
                        </div>
                    </div>

                    @if (selectedItems.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered">
                                <thead class="table-light">
                                    <tr>
                                        <th>Producto</th>
                                        <th width="120">Cantidad</th>
                                        <th width="150">Precio Costo</th>
                                        <th width="150">Precio Retail</th>
                                        <th width="150">Subtotal</th>
                                        <th width="80"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in selectedItems)
                                    {
                                        <tr>
                                            <td>@item.ProductEmoji @item.ProductName</td>
                                            <td>
                                                <input type="number" class="form-control form-control-sm" @bind="item.Quantity" min="1" />
                                            </td>
                                            <td>
                                                <input type="number" step="0.01" class="form-control form-control-sm" @bind="item.CostPrice" />
                                            </td>
                                            <td>
                                                <input type="number" step="0.01" class="form-control form-control-sm" @bind="item.RetailPrice" />
                                            </td>
                                            <td>
                                                <strong>@((item.Quantity * item.RetailPrice).ToString("C"))</strong>
                                            </td>
                                            <td>
                                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveProduct(item)">üóëÔ∏è</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot class="table-light">
                                    <tr>
                                        <td colspan="2"><strong>TOTALES</strong></td>
                                        <td><strong>@TotalCost.ToString("C")</strong></td>
                                        <td><strong>@TotalRetail.ToString("C")</strong></td>
                                        <td><strong>@TotalRetail.ToString("C")</strong></td>
                                        <td></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>

                        <div class="alert alert-info">
                            <strong>üí∞ Distribuci√≥n del Ingreso (basado en ventas):</strong><br/>
                            Para la Tienda (@storePercentage%): <strong>@((TotalRetail * storePercentage / 100).ToString("C"))</strong><br/>
                            Para Bernard (@bernardPercentage%): <strong>@((TotalRetail * bernardPercentage / 100).ToString("C"))</strong>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary text-center">
                            Agrega al menos un producto para crear la consignaci√≥n
                        </div>
                    }
                </div>
            </div>

            <!-- Acciones -->
            <div class="form-actions">
                <button class="btn btn-secondary" @onclick="GoBack">Cancelar</button>
                <button class="btn btn-success btn-lg" @onclick="CreateConsignment" disabled="@(!CanCreate || isSaving)">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                        <span>Creando...</span>
                    }
                    else
                    {
                        <span>‚úÖ Crear Consignaci√≥n</span>
                    }
                </button>
            </div>
        </div>
    }
</div>

<style>
    .create-consignment-page {
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--bs-primary);
    }

    .form-container {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 12px;
    }

    .card {
        border: none;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .card-header {
        border: none;
        padding: 1rem 1.5rem;
    }

    .form-actions {
        display: flex;
        justify-content: space-between;
        padding-top: 2rem;
        border-top: 2px solid #dee2e6;
    }

    .loading-container {
        text-align: center;
        padding: 4rem;
    }
</style>

@code {
    private List<ClientTenantDto> clients = new();
    private List<ProductDto> products = new();
    private List<ConsignmentItemModel> selectedItems = new();

    private int selectedClientId = 0;
    private int selectedProductId = 0;
    private decimal storePercentage = 70m;
    private decimal bernardPercentage = 30m;
    private DateTime? expiryDate;
    private string terms = "Liquidaci√≥n mensual";
    private string notes = "";

    private bool isLoading = true;
    private bool isSaving = false;

    private decimal TotalCost => selectedItems.Sum(i => i.Quantity * i.CostPrice);
    private decimal TotalRetail => selectedItems.Sum(i => i.Quantity * i.RetailPrice);

    private bool CanCreate =>
        selectedClientId > 0 &&
        selectedItems.Any() &&
        !string.IsNullOrWhiteSpace(terms) &&
        Math.Abs(storePercentage + bernardPercentage - 100) < 0.01m;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            // Load clients - assuming GetClientsQuery exists or we'll need to create one
            // For now, create a simple query
            clients = await GetClients();

            // Load products
            var productsQuery = new GetProductsQuery();
            products = await Mediator.Send(productsQuery);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error cargando datos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<ClientTenantDto>> GetClients()
    {
        // Temporary implementation - we'll need to create proper GetClientsQuery later
        // For now, return hardcoded clients that match the seeded data
        return new List<ClientTenantDto>
        {
            new ClientTenantDto { Id = 1, TenantName = "Mona la Dona", TenantCode = "MONA_DONA" },
            new ClientTenantDto { Id = 2, TenantName = "Sano Market", TenantCode = "SANO_MARKET" },
            new ClientTenantDto { Id = 3, TenantName = "La Papeler√≠a", TenantCode = "LA_PAPELERIA" }
        };
    }

    private void AddProduct()
    {
        var product = products.FirstOrDefault(p => p.Id == selectedProductId);
        if (product == null) return;

        // Check if already added
        if (selectedItems.Any(i => i.ProductId == product.Id))
        {
            JS.InvokeVoidAsync("alert", "Este producto ya fue agregado");
            return;
        }

        selectedItems.Add(new ConsignmentItemModel
        {
            ProductId = product.Id,
            ProductName = product.ProductName,
            ProductEmoji = product.Emoji ?? "üì¶",
            Quantity = 1,
            CostPrice = product.Price * 0.7m, // Estimate 70% of retail as cost
            RetailPrice = product.Price
        });

        selectedProductId = 0;
    }

    private void RemoveProduct(ConsignmentItemModel item)
    {
        selectedItems.Remove(item);
    }

    private async Task CreateConsignment()
    {
        if (!CanCreate) return;

        isSaving = true;
        try
        {
            var items = selectedItems.Select(i => new CreateConsignmentItemRequest(
                i.ProductId,
                i.Quantity,
                i.CostPrice,
                i.RetailPrice,
                null
            )).ToList();

            var command = new CreateConsignmentCommand(
                selectedClientId,
                expiryDate,
                notes,
                terms,
                storePercentage,
                bernardPercentage,
                items
            );

            var consignmentId = await Mediator.Send(command);
            await JS.InvokeVoidAsync("alert", "Consignaci√≥n creada exitosamente");
            Navigation.NavigateTo($"/consignments/{consignmentId}");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error al crear consignaci√≥n: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack() => Navigation.NavigateTo("/consignments");

    // Helper model for UI
    private class ConsignmentItemModel
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; } = "";
        public string ProductEmoji { get; set; } = "üì¶";
        public int Quantity { get; set; }
        public decimal CostPrice { get; set; }
        public decimal RetailPrice { get; set; }
    }

    // Temporary DTO - should be moved to Application layer later
    private class ClientTenantDto
    {
        public int Id { get; set; }
        public string TenantName { get; set; } = "";
        public string TenantCode { get; set; } = "";
    }
}
