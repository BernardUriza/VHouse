@page "/products"
@rendermode @(new InteractiveServerRenderMode())
@using MediatR
@using VHouse.Application.Commands
@using VHouse.Application.Queries
@using VHouse.Application.DTOs
@inject IMediator Mediator
@inject IJSRuntime JS

<PageTitle>Gesti√≥n de Productos - VHouse</PageTitle>

<div class="products-page">
    <div class="page-header">
        <div class="header-content">
            <h1>üå± Gesti√≥n de Productos</h1>
            <p class="subtitle">Administra tu cat√°logo de productos veganos</p>
        </div>
        <div class="header-actions">
            <button class="btn btn-success" @onclick="OpenCreateModal">
                ‚ûï Nuevo Producto
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p>Cargando productos...</p>
        </div>
    }
    else if (!products.Any())
    {
        <div class="empty-state">
            <span class="empty-icon">üì¶</span>
            <h3>No hay productos registrados</h3>
            <p>Agrega tu primer producto para comenzar</p>
            <button class="btn btn-primary" @onclick="OpenCreateModal">
                Agregar Producto
            </button>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Producto</th>
                        <th>Costo</th>
                        <th>Precio POS</th>
                        <th>Precio P√∫blico</th>
                        <th>Stock</th>
                        <th>Estado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in products)
                    {
                        <tr>
                            <td>@product.Id</td>
                            <td>
                                <span class="product-emoji">@product.Emoji</span>
                                <strong>@product.ProductName</strong>
                            </td>
                            <td>@product.PriceCost.ToString("C")</td>
                            <td>@product.PriceRetail.ToString("C")</td>
                            <td>@product.PricePublic.ToString("C")</td>
                            <td>
                                <span class="badge @(product.StockQuantity > 10 ? "bg-success" : "bg-warning")">
                                    @product.StockQuantity
                                </span>
                            </td>
                            <td>
                                <span class="badge @(product.IsActive ? "bg-success" : "bg-danger")">
                                    @(product.IsActive ? "Activo" : "Inactivo")
                                </span>
                            </td>
                            <td>
                                <button class="btn btn-sm btn-primary" @onclick="() => OpenEditModal(product)" title="Editar">
                                    ‚úèÔ∏è
                                </button>
                                <button class="btn btn-sm btn-danger ms-1" @onclick="() => DeleteProduct(product)" title="Eliminar">
                                    üóëÔ∏è
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Modal Crear/Editar Producto -->
<div class="modal fade" id="productModal" tabindex="-1" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productModalLabel">
                    @if (isEditMode)
                    {
                        <span>‚úèÔ∏è Editar Producto: @currentProduct.ProductName</span>
                    }
                    else
                    {
                        <span>‚ûï Nuevo Producto</span>
                    }
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" disabled="@isSaving"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3">
                    <div class="col-md-8">
                        <label class="form-label">Nombre del Producto</label>
                        <input type="text" class="form-control" @bind="currentProduct.ProductName" placeholder="Ej. Queso Vegano Artesanal" />
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Emoji</label>
                        <input type="text" class="form-control" @bind="currentProduct.Emoji" placeholder="üßÄ" maxlength="2" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Costo</label>
                        <input type="number" step="0.01" class="form-control" @bind="currentProduct.PriceCost" placeholder="100.00" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Precio POS</label>
                        <input type="number" step="0.01" class="form-control" @bind="currentProduct.PriceRetail" placeholder="140.00" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Precio P√∫blico</label>
                        <input type="number" step="0.01" class="form-control" @bind="currentProduct.PricePublic" placeholder="150.00" />
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Stock</label>
                        <input type="number" class="form-control" @bind="currentProduct.StockQuantity" placeholder="50" />
                    </div>
                    <div class="col-12">
                        <label class="form-label">Descripci√≥n</label>
                        <textarea class="form-control" rows="3" @bind="currentProduct.Description" placeholder="Descripci√≥n del producto..."></textarea>
                    </div>
                    <div class="col-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="currentProduct.IsActive" id="isActive" />
                            <label class="form-check-label" for="isActive">
                                Producto Activo
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSaving">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="SaveProduct" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Guardando...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "Actualizar" : "Crear") Producto</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Confirmaci√≥n de Eliminaci√≥n -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Confirmar Eliminaci√≥n
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (productToDelete != null)
                {
                    <p class="mb-3">¬øEst√°s seguro de que deseas eliminar este producto?</p>
                    <div class="alert alert-warning d-flex align-items-center">
                        <span class="fs-3 me-3">@productToDelete.Emoji</span>
                        <div>
                            <strong>@productToDelete.ProductName</strong><br />
                            <small class="text-muted">Stock: @productToDelete.StockQuantity | Precio: @productToDelete.PriceRetail.ToString("C")</small>
                        </div>
                    </div>
                    <p class="text-danger mb-0">
                        <i class="bi bi-exclamation-circle me-1"></i>
                        <strong>Esta acci√≥n no se puede deshacer.</strong>
                    </p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i> Cancelar
                </button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                    @if (isDeleting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Eliminando...</span>
                    }
                    else
                    {
                        <span><i class="bi bi-trash-fill me-1"></i> Eliminar Producto</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999">
    <div id="successToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-check-circle-fill me-2"></i>
                <span id="successMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>

    <div id="errorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <span id="errorMessage"></span>
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

<style>
    .products-page {
        padding: 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1.5rem;
        border-bottom: 2px solid var(--bs-primary);
    }

    .header-content h1 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }

    .subtitle {
        margin: 0.5rem 0 0;
        font-size: 1.1rem;
        opacity: 0.8;
    }

    .loading-container {
        text-align: center;
        padding: 4rem;
    }

    .empty-state {
        text-align: center;
        padding: 4rem;
        background: var(--bs-light);
        border-radius: 12px;
        margin: 2rem 0;
    }

    .empty-icon {
        font-size: 4rem;
        display: block;
        margin-bottom: 1rem;
    }

    .product-emoji {
        font-size: 1.5rem;
        margin-right: 0.5rem;
    }

    .modal.show {
        display: block;
    }

    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }

    @@media (max-width: 768px) {
        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }
    }
</style>

@code {
    private List<ProductDto> products = new();
    private ProductDto currentProduct = new();
    private ProductDto? productToDelete = null;
    private bool isLoading = false;
    private bool isSaving = false;
    private bool isDeleting = false;
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        var query = new GetProductsQuery();
        var result = await Mediator.Send(query);
        products = result.Where(p => p.IsActive).ToList();
        isLoading = false;
    }

    private async Task OpenCreateModal()
    {
        currentProduct = new ProductDto
        {
            IsActive = true,
            IsVegan = true,
            StockQuantity = 0
        };
        isEditMode = false;
        await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#productModal").AsTask()
            .ContinueWith(_ => JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('productModal')).show()"));
    }

    private async Task OpenEditModal(ProductDto product)
    {
        currentProduct = new ProductDto
        {
            Id = product.Id,
            ProductName = product.ProductName,
            Emoji = product.Emoji,
            PriceCost = product.PriceCost,
            PriceRetail = product.PriceRetail,
            PriceSuggested = product.PriceSuggested,
            PricePublic = product.PricePublic,
            Description = product.Description,
            StockQuantity = product.StockQuantity,
            IsActive = product.IsActive,
            IsVegan = product.IsVegan
        };
        isEditMode = true;
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('productModal')).show()");
    }

    private async Task SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(currentProduct.ProductName))
        {
            await ShowToast("error", "El nombre del producto es requerido");
            return;
        }

        isSaving = true;
        StateHasChanged();

        try
        {
            if (isEditMode)
            {
                var command = new UpdateProductCommand(
                    Id: currentProduct.Id,
                    ProductName: currentProduct.ProductName,
                    Emoji: currentProduct.Emoji ?? string.Empty,
                    PriceCost: currentProduct.PriceCost,
                    PriceRetail: currentProduct.PriceRetail,
                    PriceSuggested: currentProduct.PriceSuggested > 0 ? currentProduct.PriceSuggested : currentProduct.PriceRetail,
                    PricePublic: currentProduct.PricePublic,
                    Description: currentProduct.Description ?? string.Empty,
                    StockQuantity: currentProduct.StockQuantity,
                    IsActive: currentProduct.IsActive
                );
                await Mediator.Send(command);
                await ShowToast("success", $"Producto '{currentProduct.ProductName}' actualizado correctamente");
            }
            else
            {
                var command = new CreateProductCommand(
                    ProductName: currentProduct.ProductName,
                    Emoji: currentProduct.Emoji ?? string.Empty,
                    PriceCost: currentProduct.PriceCost,
                    PriceRetail: currentProduct.PriceRetail,
                    PriceSuggested: currentProduct.PriceSuggested > 0 ? currentProduct.PriceSuggested : currentProduct.PriceRetail,
                    PricePublic: currentProduct.PricePublic,
                    Description: currentProduct.Description ?? string.Empty,
                    StockQuantity: currentProduct.StockQuantity,
                    IsVegan: true
                );
                await Mediator.Send(command);
                await ShowToast("success", $"Producto '{currentProduct.ProductName}' creado correctamente");
            }

            await JS.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('productModal'))?.hide()");
            await LoadProducts();
        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Error al guardar: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        productToDelete = product;
        StateHasChanged();
        await JS.InvokeVoidAsync("eval", "new bootstrap.Modal(document.getElementById('deleteModal')).show()");
    }

    private async Task ConfirmDelete()
    {
        if (productToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            var command = new DeleteProductCommand(productToDelete.Id);
            await Mediator.Send(command);
            await ShowToast("success", $"Producto '{productToDelete.ProductName}' eliminado correctamente");
            await JS.InvokeVoidAsync("eval", "bootstrap.Modal.getInstance(document.getElementById('deleteModal'))?.hide()");
            await LoadProducts();
        }
        catch (Exception ex)
        {
            await ShowToast("error", $"Error al eliminar: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
            productToDelete = null;
        }
    }

    private async Task ShowToast(string type, string message)
    {
        var toastId = type == "success" ? "successToast" : "errorToast";
        var messageId = type == "success" ? "successMessage" : "errorMessage";

        await JS.InvokeVoidAsync("eval", $"document.getElementById('{messageId}').innerText = '{message}'");
        await JS.InvokeVoidAsync("eval", $"new bootstrap.Toast(document.getElementById('{toastId}')).show()");
    }
}
