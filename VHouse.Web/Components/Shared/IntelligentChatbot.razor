@using VHouse.Domain.Interfaces
@using VHouse.Domain.Entities
@inject IIntelligentChatbotService ChatbotService
@inject IChatContextService ContextService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<!-- ü§ñ ASISTENTE IA VEGANO PROFESIONAL FLOTANTE UNIVERSAL -->
<div class="ai-assistant-container @(IsExpanded ? "expanded" : "collapsed")" id="intelligent-chatbot">
    <!-- Bot√≥n flotante principal -->
    <div class="ai-assistant-toggle" @onclick="@(async () => await ToggleAiAssistant())">
        @if (!IsExpanded)
        {
            <div class="ai-toggle-content">
                <span class="ai-pulse">üå±</span>
                <div class="ai-ripple"></div>
                <div class="ai-glow"></div>
            </div>
            <span class="ai-notification @(hasNewMessage ? "active" : "")"></span>
            <div class="ai-tooltip">
                <span>@GetTooltipText()</span>
                <div class="ai-tooltip-arrow"></div>
            </div>
        }
        else
        {
            <div class="ai-close-icon">
                <span>‚úï</span>
            </div>
        }
    </div>
    
    @if (IsExpanded)
    {
        <div class="ai-assistant-panel">
            <!-- Header contextual -->
            <div class="ai-header">
                <div class="ai-header-bg"></div>
                <div class="ai-avatar">
                    <span class="ai-emoji">üå±</span>
                    <div class="ai-status-indicator @(isThinking ? "thinking" : "ready")"></div>
                    <div class="ai-avatar-glow"></div>
                </div>
                <div class="ai-info">
                    <h3>VeganAI Assistant</h3>
                    <p class="ai-status">@currentStatus</p>
                    <div class="ai-brand">
                        <span>Powered by Claude AI</span>
                    </div>
                </div>
                <div class="ai-header-actions">
                    <button class="ai-minimize-btn" @onclick="MinimizeChat" title="Minimizar">
                        <span>‚àí</span>
                    </button>
                </div>
            </div>
            
            <div class="ai-chat-container" id="aiChatContainer">
                @foreach (var message in messages)
                {
                    <div class="ai-message @(message.IsUser ? "user" : "assistant") @(message.IsTyping ? "typing" : "")">
                        @if (!message.IsUser)
                        {
                            <div class="ai-message-avatar">ü§ñ</div>
                        }
                        <div class="ai-message-content">
                            @if (message.IsTyping)
                            {
                                <div class="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            }
                            else
                            {
                                @((MarkupString)message.Content)
                            }
                        </div>
                        @if (message.IsUser)
                        {
                            <div class="ai-message-avatar">üë§</div>
                        }
                    </div>
                }
            </div>
            
            <!-- Sugerencias contextuales din√°micas -->
            <div class="ai-suggestions">
                @foreach (var suggestion in suggestions)
                {
                    <button class="ai-suggestion-chip" @onclick="() => SendMessage(suggestion)">
                        @suggestion
                    </button>
                }
            </div>
            
            <!-- Comandos r√°pidos contextuals -->
            @if (quickActions.Any())
            {
                <div class="ai-quick-actions">
                    @foreach (var action in quickActions)
                    {
                        <button class="ai-action-btn" @onclick="() => ExecuteAction(action)">
                            <span class="action-icon">@action.Icon</span>
                            <span class="action-label">@action.Label</span>
                        </button>
                    }
                </div>
            }
            
            <div class="ai-input-container">
                <input type="text" @bind="inputMessage" @bind:event="oninput" 
                       @onkeypress="@(async (e) => { if (e.Code == "Enter" && !e.ShiftKey) await SendMessage(); })"
                       placeholder="@GetPlaceholderText()" 
                       class="ai-input" disabled="@isThinking" />
                <button class="ai-send-button" @onclick="@(async () => await SendMessage())" 
                        disabled="@(isThinking || string.IsNullOrWhiteSpace(inputMessage))">
                    @if (isThinking)
                    {
                        <span class="ai-loading">‚è≥</span>
                    }
                    else
                    {
                        <span>‚û§</span>
                    }
                </button>
            </div>
        </div>
    }
</div>

<style>
    /* Usar los estilos existentes del ClientPortal pero con mejoras */
    .ai-assistant-container {
        position: fixed;
        bottom: 25px;
        right: 25px;
        z-index: 9999;
        transition: all 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);
        filter: drop-shadow(0 25px 50px rgba(0, 0, 0, 0.15));
    }

    .ai-assistant-container.collapsed {
        width: 75px;
        height: 75px;
    }

    .ai-assistant-container.expanded {
        width: 420px;
        height: 650px;
        max-height: 85vh;
    }

    .ai-quick-actions {
        padding: 10px 15px;
        border-top: 1px solid rgba(102, 126, 234, 0.1);
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
        background: rgba(15, 20, 25, 0.2);
    }

    .ai-action-btn {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 8px 12px;
        background: linear-gradient(135deg, rgba(76, 175, 80, 0.15) 0%, rgba(129, 199, 132, 0.15) 100%);
        border: 1px solid rgba(76, 175, 80, 0.3);
        border-radius: 16px;
        color: #e2e8f0;
        font-size: 12px;
        cursor: pointer;
        transition: all 0.3s ease;
        white-space: nowrap;
    }

    .ai-action-btn:hover {
        background: linear-gradient(135deg, rgba(76, 175, 80, 0.25) 0%, rgba(129, 199, 132, 0.25) 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(76, 175, 80, 0.2);
    }

    .action-icon {
        font-size: 14px;
    }

    .action-label {
        font-weight: 500;
    }

    /* Importar estilos externos del archivo CSS */
    /* Los estilos est√°n definidos en wwwroot/css/intelligent-chatbot.css */
    
    /* Estilos adicionales espec√≠ficos para mensajes */
    .ai-message-content {
        max-width: 70% !important;
        padding: 12px 16px !important;
        background: 
            linear-gradient(135deg, rgba(102, 126, 234, 0.15) 0%, rgba(118, 75, 162, 0.1) 100%),
            rgba(15, 23, 42, 0.4) !important;
        border-radius: 18px !important;
        color: #e2e8f0 !important;
        font-size: 14px !important;
        line-height: 1.5 !important;
        border: 1px solid rgba(102, 126, 234, 0.25) !important;
        box-shadow: 
            0 4px 12px rgba(0, 0, 0, 0.1),
            inset 0 1px 0 rgba(255, 255, 255, 0.05) !important;
        backdrop-filter: blur(10px) !important;
    }
    
    .ai-message.user .ai-message-content {
        background: 
            linear-gradient(135deg, rgba(76, 175, 80, 0.15) 0%, rgba(129, 199, 132, 0.1) 100%),
            rgba(15, 23, 42, 0.4) !important;
        border-color: rgba(76, 175, 80, 0.25) !important;
        box-shadow: 
            0 4px 12px rgba(76, 175, 80, 0.1),
            inset 0 1px 0 rgba(255, 255, 255, 0.05) !important;
    }
    
    .ai-message-content:hover {
        transform: translateY(-1px) !important;
        box-shadow: 
            0 6px 16px rgba(0, 0, 0, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.08) !important;
        transition: all 0.2s ease !important;
    }
</style>

@code {
    [Parameter] public object? ContextData { get; set; }
    [Parameter] public List<Order>? OrdersData { get; set; }
    [Parameter] public bool IsExpanded { get; set; } = false;
    [Parameter] public EventCallback<bool> IsExpandedChanged { get; set; }

    private ChatSession? currentSession;
    private string sessionId = Guid.NewGuid().ToString();
    private bool isThinking = false;
    private bool hasNewMessage = false;
    private string inputMessage = "";
    private string currentStatus = "Inicializando... üîÑ";
    
    private List<ChatMessage> messages = new();
    private List<string> suggestions = new();
    private List<ChatAction> quickActions = new();

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            await InitializeChatSession();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inicializando chatbot: {ex.Message}");
            await InitializeFallbackSession();
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Actualizar datos cuando cambian los par√°metros
        if (OrdersData != null && currentSession != null)
        {
            currentSession.Context.AdditionalData["orders"] = OrdersData;
            currentSession.Context.AdditionalData["totalOrders"] = OrdersData.Count;
            currentSession.Context.AdditionalData["totalRevenue"] = OrdersData.Sum(o => o.Total);
            currentSession.Context.AdditionalData["lastOrder"] = OrdersData.OrderByDescending(o => o.OrderDate).FirstOrDefault();
        }
    }

    private async Task InitializeChatSession()
    {
        currentSession = await ChatbotService.InitializeChatSessionAsync(
            Navigation.Uri, ContextData);
        
        sessionId = currentSession.SessionId;
        
        // Convertir mensajes de sesi√≥n a formato UI
        messages = currentSession.Messages.Select(m => new ChatMessage
        {
            Content = m.Content,
            IsUser = m.IsUser,
            Timestamp = m.Timestamp
        }).ToList();
        
        suggestions = await ChatbotService.GetContextualSuggestionsAsync(sessionId);
        quickActions = GenerateQuickActions(currentSession.Context);
        
        currentStatus = $"Online - {currentSession.Context.PageTitle} üå±";
        StateHasChanged();
    }

    private async Task InitializeFallbackSession()
    {
        messages.Add(new ChatMessage
        {
            Content = "üå± ¬°Hola! Soy tu asistente vegano. Puedo ayudarte con informaci√≥n sobre productos y recomendaciones.<br/><br/>¬øEn qu√© puedo ayudarte hoy?",
            IsUser = false,
            Timestamp = DateTime.UtcNow
        });

        suggestions = new List<string>
        {
            "Ver productos disponibles",
            "Informaci√≥n nutricional",
            "Hacer pedido",
            "Contactar soporte"
        };

        currentStatus = "Online - Modo b√°sico üå±";
        StateHasChanged();
    }

    private async Task ToggleAiAssistant()
    {
        IsExpanded = !IsExpanded;
        await IsExpandedChanged.InvokeAsync(IsExpanded);
        hasNewMessage = false;
        
        if (IsExpanded && currentSession == null)
        {
            await InitializeChatSession();
        }
        
        StateHasChanged();
    }

    private void MinimizeChat()
    {
        IsExpanded = false;
        InvokeAsync(async () => await IsExpandedChanged.InvokeAsync(false));
        StateHasChanged();
    }

    private async Task SendMessage(string? message = null)
    {
        var userMessage = message ?? inputMessage;
        if (string.IsNullOrWhiteSpace(userMessage)) return;

        try
        {
            // Agregar mensaje del usuario
            messages.Add(new ChatMessage
            {
                Content = userMessage,
                IsUser = true,
                Timestamp = DateTime.UtcNow
            });

            inputMessage = "";
            isThinking = true;
            currentStatus = "Pensando... ü§î";
            
            // Indicador de escritura
            var typingMessage = new ChatMessage
            {
                Content = "",
                IsUser = false,
                IsTyping = true,
                Timestamp = DateTime.UtcNow
            };
            messages.Add(typingMessage);
            StateHasChanged();

            // Procesar con chatbot inteligente
            // Enriquecer contexto con datos de pedidos si est√°n disponibles
            var enrichedContext = ContextData;
            if (OrdersData != null && OrdersData.Any())
            {
                enrichedContext = new 
                {
                    originalContext = ContextData,
                    orders = OrdersData,
                    statistics = new
                    {
                        totalOrders = OrdersData.Count,
                        totalRevenue = OrdersData.Sum(o => o.Total),
                        todayOrders = OrdersData.Count(o => o.OrderDate.Date == DateTime.Today),
                        lastOrder = OrdersData.OrderByDescending(o => o.OrderDate).FirstOrDefault(),
                        averageOrderValue = OrdersData.Any() ? OrdersData.Average(o => o.Total) : 0
                    }
                };
            }
            
            var request = new ChatbotRequest
            {
                SessionId = sessionId,
                UserMessage = userMessage,
                CurrentUrl = Navigation.Uri,
                ContextData = enrichedContext
            };

            var response = await ChatbotService.ProcessMessageAsync(request);

            // Remover indicador de escritura
            messages.Remove(typingMessage);

            // Agregar respuesta
            messages.Add(new ChatMessage
            {
                Content = response.Content,
                IsUser = false,
                Timestamp = DateTime.UtcNow
            });

            // Actualizar sugerencias y acciones
            suggestions = response.Suggestions;
            if (response.RecommendedActions.Any())
            {
                quickActions = response.RecommendedActions;
            }

            isThinking = false;
            currentStatus = response.IsSuccessful ? 
                $"Online - {response.UsedContext.PageTitle} üå±" : 
                "Error temporal ‚ö†Ô∏è";

            StateHasChanged();
            
            // Scroll al final
            await JSRuntime.InvokeVoidAsync("eval", @"
                const chatContainer = document.getElementById('aiChatContainer');
                if (chatContainer) {
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error enviando mensaje: {ex.Message}");
            
            var errorMessage = messages.FirstOrDefault(m => m.IsTyping);
            if (errorMessage != null)
            {
                messages.Remove(errorMessage);
            }

            messages.Add(new ChatMessage
            {
                Content = "üå± Disculpa, tengo un problema t√©cnico moment√°neo. ¬øPuedo ayudarte con algo espec√≠fico?",
                IsUser = false,
                Timestamp = DateTime.UtcNow
            });

            isThinking = false;
            currentStatus = "Error - Reintentando... üîÑ";
            StateHasChanged();
        }
    }

    private async Task ExecuteAction(ChatAction action)
    {
        switch (action.ActionType)
        {
            case ActionTypes.ShowProducts:
                await SendMessage("/productos");
                break;
            case ActionTypes.CreateOrder:
                await SendMessage("/pedido");
                break;
            case ActionTypes.ShowPrices:
                await SendMessage("/precios");
                break;
            case ActionTypes.ContactSupport:
                await SendMessage("¬øC√≥mo puedo contactar a Bernard?");
                break;
            default:
                await SendMessage(action.Label);
                break;
        }
    }

    private List<ChatAction> GenerateQuickActions(ChatContext context)
    {
        return context.PageType switch
        {
            PageTypes.ClientPortal => new List<ChatAction>
            {
                new ChatAction { ActionType = ActionTypes.ShowProducts, Label = "Ver Cat√°logo", Icon = "üõí" },
                new ChatAction { ActionType = ActionTypes.CreateOrder, Label = "Nuevo Pedido", Icon = "üõçÔ∏è" },
                new ChatAction { ActionType = ActionTypes.ShowPrices, Label = "Precios", Icon = "üí∞" }
            },
            PageTypes.Orders => new List<ChatAction>
            {
                new ChatAction { ActionType = ActionTypes.ViewOrders, Label = "Analizar Pedidos", Icon = "üìä" },
                new ChatAction { ActionType = "optimize-inventory", Label = "Optimizar Stock", Icon = "üì¶" }
            },
            PageTypes.AdminDashboard => new List<ChatAction>
            {
                new ChatAction { ActionType = "generate-report", Label = "Generar Reporte", Icon = "üìà" },
                new ChatAction { ActionType = "business-insights", Label = "Insights", Icon = "üí°" }
            },
            _ => new List<ChatAction>()
        };
    }

    private string GetTooltipText()
    {
        return currentSession?.Context.PageType switch
        {
            PageTypes.ClientPortal => "Asistente B2B Vegano",
            PageTypes.Orders => "An√°lisis de Pedidos IA",
            PageTypes.AdminDashboard => "Consultor de Negocio IA",
            _ => "Asistente Vegano IA"
        };
    }

    private string GetPlaceholderText()
    {
        return currentSession?.Context.PageType switch
        {
            PageTypes.ClientPortal => "Preg√∫ntame sobre productos o pedidos...",
            PageTypes.Orders => "Analiza pedidos, optimiza inventario...",
            PageTypes.AdminDashboard => "Consulta insights de negocio...",
            _ => "¬øC√≥mo puedo ayudarte?"
        };
    }

    public async ValueTask DisposeAsync()
    {
        // Cleanup si es necesario
        await Task.CompletedTask;
    }

    // Clases auxiliares para UI
    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public bool IsTyping { get; set; }
        public DateTime Timestamp { get; set; }
    }
    
    // Importar Order si no est√° disponible
    public class Order
    {
        public int Id { get; set; }
        public DateTime OrderDate { get; set; }
        public string CustomerName { get; set; } = string.Empty;
        public decimal Total { get; set; }
        public List<OrderItem>? Items { get; set; }
    }
    
    public class OrderItem
    {
        public string ProductName { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }
}