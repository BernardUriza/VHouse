@model UploadViewModel
@{
    ViewData["Title"] = "Upload Files";
}

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index")">Gallery</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Upload Files</li>
                </ol>
            </nav>

            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">ðŸ“¤ Upload Files</h1>
                    <p class="text-muted">Add photos and documents to your gallery</p>
                </div>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Gallery
                </a>
            </div>
        </div>
    </div>

    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-body">
                    <form asp-action="Upload" method="post" enctype="multipart/form-data" id="uploadForm">
                        @Html.AntiForgeryToken()

                        <!-- Album Selection -->
                        <div class="mb-4">
                            <label asp-for="SelectedAlbumId" class="form-label fw-bold">Select Album *</label>
                            <select asp-for="SelectedAlbumId" class="form-select" required>
                                <option value="">Choose an album...</option>
                                @foreach (var album in Model.Albums)
                                {
                                    <option value="@album.Id">
                                        @album.Name
                                        @if (!string.IsNullOrEmpty(album.Description))
                                        {
                                            <text> - @album.Description</text>
                                        }
                                    </option>
                                }
                            </select>
                            <span asp-validation-for="SelectedAlbumId" class="text-danger"></span>
                        </div>

                        <!-- File Selection -->
                        <div class="mb-4">
                            <label for="fileInput" class="form-label fw-bold">Select Files *</label>
                            <div class="file-drop-area" id="fileDropArea">
                                <div class="file-drop-content text-center py-5">
                                    <i class="fas fa-cloud-upload-alt fa-3x text-muted mb-3"></i>
                                    <h5>Drag & drop files here</h5>
                                    <p class="text-muted">or <strong>click to browse</strong></p>
                                    <input type="file" asp-for="Files" multiple class="form-control d-none"
                                           id="fileInput" accept="@string.Join(",", Model.AllowedContentTypes.Select(t => GetFileExtensions(t)))" />
                                </div>
                            </div>
                            <span asp-validation-for="Files" class="text-danger"></span>

                            <!-- File Preview -->
                            <div id="filePreview" class="mt-3"></div>
                        </div>

                        <!-- Caption -->
                        <div class="mb-4">
                            <label asp-for="Caption" class="form-label">Caption (Optional)</label>
                            <textarea asp-for="Caption" class="form-control" rows="3"
                                      placeholder="Add a description for these files..."></textarea>
                            <span asp-validation-for="Caption" class="text-danger"></span>
                        </div>

                        <!-- Upload Constraints -->
                        <div class="alert alert-info">
                            <h6><i class="fas fa-info-circle"></i> Upload Guidelines</h6>
                            <ul class="mb-0">
                                <li><strong>Maximum file size:</strong> @Model.MaxSizeMB MB per file</li>
                                <li><strong>Allowed types:</strong> @string.Join(", ", Model.AllowedContentTypes)</li>
                                <li><strong>Multiple files:</strong> You can select multiple files at once</li>
                                <li><strong>Thumbnails:</strong> Automatically generated for images</li>
                            </ul>
                        </div>

                        <!-- Upload Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg" id="uploadButton">
                                <i class="fas fa-upload"></i> Upload Files
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const fileDropArea = document.getElementById('fileDropArea');
            const fileInput = document.getElementById('fileInput');
            const filePreview = document.getElementById('filePreview');
            const uploadForm = document.getElementById('uploadForm');
            const uploadButton = document.getElementById('uploadButton');

            // File drop functionality
            fileDropArea.addEventListener('click', () => fileInput.click());

            fileDropArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                fileDropArea.classList.add('dragover');
            });

            fileDropArea.addEventListener('dragleave', () => {
                fileDropArea.classList.remove('dragover');
            });

            fileDropArea.addEventListener('drop', (e) => {
                e.preventDefault();
                fileDropArea.classList.remove('dragover');
                fileInput.files = e.dataTransfer.files;
                updateFilePreview();
            });

            fileInput.addEventListener('change', updateFilePreview);

            function updateFilePreview() {
                filePreview.innerHTML = '';

                if (fileInput.files.length === 0) return;

                const files = Array.from(fileInput.files);
                files.forEach((file, index) => {
                    const fileItem = document.createElement('div');
                    fileItem.className = 'file-preview-item d-flex align-items-center justify-content-between p-2 border rounded mb-2';

                    const fileInfo = document.createElement('div');
                    fileInfo.className = 'd-flex align-items-center';

                    const fileIcon = getFileIcon(file.type);
                    const fileSize = (file.size / 1024).toFixed(1);

                    fileInfo.innerHTML = `
                        <i class="${fileIcon} me-2"></i>
                        <div>
                            <div class="fw-bold">${file.name}</div>
                            <small class="text-muted">${fileSize} KB â€¢ ${file.type}</small>
                        </div>
                    `;

                    const removeButton = document.createElement('button');
                    removeButton.type = 'button';
                    removeButton.className = 'btn btn-sm btn-outline-danger';
                    removeButton.innerHTML = '<i class="fas fa-times"></i>';
                    removeButton.onclick = () => removeFile(index);

                    fileItem.appendChild(fileInfo);
                    fileItem.appendChild(removeButton);
                    filePreview.appendChild(fileItem);
                });
            }

            function removeFile(index) {
                const dt = new DataTransfer();
                const files = Array.from(fileInput.files);

                files.forEach((file, i) => {
                    if (i !== index) dt.items.add(file);
                });

                fileInput.files = dt.files;
                updateFilePreview();
            }

            function getFileIcon(mimeType) {
                if (mimeType.startsWith('image/')) return 'fas fa-image text-primary';
                if (mimeType === 'application/pdf') return 'fas fa-file-pdf text-danger';
                return 'fas fa-file text-muted';
            }

            // Form validation and upload progress
            uploadForm.addEventListener('submit', function(e) {
                if (fileInput.files.length === 0) {
                    e.preventDefault();
                    alert('Please select at least one file to upload.');
                    return;
                }

                // Disable button and show progress
                uploadButton.disabled = true;
                uploadButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Uploading...';
            });
        });
    </script>

    <style>
        .file-drop-area {
            border: 2px dashed #dee2e6;
            border-radius: 0.375rem;
            background-color: #f8f9fa;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .file-drop-area:hover,
        .file-drop-area.dragover {
            border-color: #0d6efd;
            background-color: #e7f1ff;
        }

        .file-preview-item {
            background-color: #f8f9fa;
        }
    </style>
}

@functions {
    string GetFileExtensions(string contentType)
    {
        return contentType switch
        {
            "image/jpeg" => ".jpg,.jpeg",
            "image/png" => ".png",
            "image/webp" => ".webp",
            "application/pdf" => ".pdf",
            _ => ""
        };
    }
}